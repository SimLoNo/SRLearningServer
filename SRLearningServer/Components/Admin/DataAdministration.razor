@page "/admin/data"
@rendermode InteractiveServer
@using SRLearningServer.Components.Interfaces.FrontendServices
@using SRLearningServer.Components.Models.DTO

@inject IFrontendAttachmentService _attachmentService
@inject IFrontendCardService _cardService
@inject IFrontendResultService _resultService
@inject IFrontendTypeService _typeService
@inject IFrontendTypeCategoryListService _typeCategoryListService

<PageTitle>Data administration</PageTitle>

<h3>Data Administration</h3>
<button class="btn btn-primary" @onclick="SetCreateType">Opret ny</button>
<button class="btn btn-primary" @onclick="SetEditType">Opdater eksisterende</button>
<div>
    @if ((createType == true || editType == true) && workingType == "")
    {

        <label for="typeSelection">Vælg en data type du vil :</label>
        <select name="typeSelection" @bind="workingType" id="typeSelection">
            <option value="card">Kort</option>
            <option value="attachment">vedhæft</option>
            <option value="result">Resultat</option>
            <option value="type">Type</option>
            <option value="typeCategoryList">Type Kategori</option>
        </select>
    }
    else if (createType == true)
    {
        if (workingType == "card")
        {
            <RadzenStack class="rz-p-0 rz-p-md-12">
                <RadzenTemplateForm TItem="CardDto" Data=@card>
                    <RadzenRow>
                        <RadzenCard>
                            <RadzenFormField Text="Navn" Variant="@variant">
                                <ChildContent>
                                    <RadzenTextBox Name="CardName" @bind-Value="card.CardName" />
                                </ChildContent>
                                <Helper>
                                    <RadzenRequiredValidator Text="Navn er påkrævet" Component="CardName" />
                                </Helper>
                            </RadzenFormField>
                            <RadzenFormField Text="Beskrivelse" Variant="@variant">
                                <ChildContent>
                                    <RadzenTextBox Name="CardText" @bind-Value="card.CardText" />
                                </ChildContent>
                                <Helper>
                                    <RadzenRequiredValidator Text="Beskrivelse er påkrævet" Component="CardText" />
                                </Helper>
                            </RadzenFormField>
                            <RadzenFormField Variant="@variant">
                                <RadzenLabel Text="Vedhæftning" Component="AttachmentDropDown" />
                                <RadzenDropDownDataGrid Context="AttachmentContext" Name="AttachmentDropDown" @bind-Value="card.AttachmentId" Data="@attachmentList" ValueProperty="AttachmentId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering>
                                    <Template>
                                        Navn: @AttachmentContext.AttachmentName - Aktiv: @(@AttachmentContext.Active ? "Ja" : "Nej")
                                    </Template>
                                    </RadzenDropDownDataGrid>
                            </RadzenFormField>
                            <RadzenFormField Variant="@variant">
                                <RadzenRadioButtonList Name="Active" @bind-Value="card.Active" TValue="bool">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Aktiv" Value="@true"/>
                                        <RadzenRadioButtonListItem Text="Inaktiv" Value="@false"/>
                                    </Items>
                                </RadzenRadioButtonList>
                            </RadzenFormField>
                        </RadzenCard>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenCard class="rz-p-0 rz-p-md-12" Variant="@variant">
                            <RadzenPickList Style="width:100%;" Multiple Context="ResultContext" @bind-Target="@card.Results" @bind-Source="@resultList" TextProperty="@nameof(Models.DTO.ResultDto.ResultText)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte resultater
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte resultater
                                 </TargetHeader>
                                 <Template>
                                    resultat: @ResultContext.ResultText - Aktiv: @(@ResultContext.Active ? "Ja" : "Nej")
                                </Template>
                            </RadzenPickList>
                        </RadzenCard>
                    </RadzenRow>

                    <RadzenRow>
                        <RadzenCard class="rz-p-0 rz-p-md-12" Variant="@variant">
                            <RadzenPickList Style="width:100%;" Multiple Context="TypeContext" @bind-Target="@card.Types" @bind-Source="@typeList" TextProperty="@nameof(Models.DTO.TypeDto.CardTypeName)" AllowFiltering>
                                <SourceHeader>
                                    Fravalgte typer
                                </SourceHeader>
                                <TargetHeader>
                                    Valgte typer
                                </TargetHeader>
                                <Template>
                                    Type: @TypeContext.CardTypeName - Aktiv: @(@TypeContext.Active ? "Ja" : "Nej")
                                </Template>
                            </RadzenPickList>
                        </RadzenCard>
                    </RadzenRow>
                </RadzenTemplateForm>
            </RadzenStack>
                

                
        }
        else if (workingType == "attachment")
        {
            <div>
                <EditForm Model="@attachment" OnValidSubmit="@CreateAttachment">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="attachmentName">Navn</label>
                        <InputText type="text" required id="attachmentName" @bind-Value="attachment.AttachmentName" />
                    </div>
                    <div>
                        <label for="active">Aktiv</label>
                        <InputCheckbox type="checkbox" id="active" @bind-Value="attachment.Active" />
                    </div>
                    <div>
                        <label for="attachmentUrl">Fil:</label>
                        <InputFile OnChange="HandleFileSelected" />
                    </div>
                    <button type="submit">Submit</button>
                </EditForm>
            </div>
        }
        else if (workingType == "result")
        {
            @* <div>
                <EditForm Model="@result" OnValidSubmit="@CreateResult">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="resultText">Tekst</label>
                        <InputText type="text" required id="resultText" @bind-Value="result.ResultText" />
                    </div>
                    <div>
                        <label for="active">Aktiv</label>
                        <InputCheckbox type="checkbox" id="active" @bind-Value="result.Active" />
                    </div>
                    <div>
                        <label for="attachment">Vedhæftning</label>
                        <InputSelect name="attachment" @bind-Value="attachmentId">
                            @foreach (var att in attachmentList)
                            {
                                if (att.Active == true)
                                {
                                    <option value="@att.AttachmentId">@att.AttachmentName</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <button type="submit">Submit</button>
                </EditForm>
            </div> *@
        }
        else if (workingType == "type")
        {
            @* <div>
                <EditForm Model="@type" OnValidSubmit="CreateType">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="cardTypeName">Navn</label>
                        <InputText type="text" required id="cardTypeName" @bind-Value="type.CardTypeName" />
                    </div>
                    <div>
                        <label for="active">Aktiv</label>
                        <InputCheckbox type="checkbox" id="active" @bind-Value="type.Active" />
                    </div>
                    <button type="submit">Submit</button>
                </EditForm>
            </div> *@
        }
        else if (workingType == "typeCategoryList")
        {
            @* <div>
                <EditForm Model="@typeCategoryList" OnValidSubmit="CreateTypeCategoryList">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="typeCategoryListName">Navn</label>
                        <InputText type="text" required id="typeCategoryListName" @bind-Value="typeCategoryList.TypeCategoryListName" />
                    </div>
                    <div>
                        <label for="active">Aktiv</label>
                        <InputCheckbox type="checkbox" id="active" @bind-Value="typeCategoryList.Active" />
                    </div>
                    <div>
                        <label for="type">Typer</label>
                        <InputSelect multiple name="type" @bind-Value="selectedTypeIds">
                            @foreach (var type in typeList)
                            {
                                if (type.Active == true)
                                {
                                    <option value="@type.TypeId">@type.CardTypeName</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <button type="submit">Submit</button>
                </EditForm>
            </div> *@
        }

    }
    else if(editType == true)
    {
        if (workingType == "card")
        {

            <div>
                <label for="card">Kort</label>
                <select name="card" @onchange="SelectCard">
                    <option value="0">Vælg kort</option>
                    @foreach (var card in cardList)
                    {
                        <option value="@card.CardId">Navn: @card.CardName - Tekst: @card.CardText - Status: @(card.Active ? "Aktiv" : "Inaktiv")</option>
                    }
                </select>
            </div>
            if (card.CardId > 0)
            {
                <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <RadzenTemplateForm TItem="CardDto" Data=@card>
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                    <RadzenColumn Size="12">
                                <RadzenFormField Text="Navn" Variant="@variant">
                                    <ChildContent>
                                        <RadzenTextBox Style="width: 100%" Name="CardName" @bind-Value="card.CardName" />
                                    </ChildContent>
                                    <Helper>
                                        <RadzenRequiredValidator Text="Navn er påkrævet" Component="CardName" />
                                    </Helper>
                                </RadzenFormField>
                            </RadzenColumn>

                            <RadzenColumn>
                                <RadzenFormField Text="Beskrivelse" Variant="@variant">
                                    <ChildContent>
                                        <RadzenTextBox Name="CardText" @bind-Value="card.CardText" />
                                    </ChildContent>
                                    <Helper>
                                        <RadzenRequiredValidator Text="Beskrivelse er påkrævet" Component="CardText" />
                                    </Helper>
                                </RadzenFormField>
                            </RadzenColumn>

                            <RadzenColumn>
                                <RadzenFormField Variant="@variant">
                                    <RadzenLabel Text="Vedhæftning" Component="AttachmentDropDown" />
                                    <RadzenDropDownDataGrid Context="AttachmentContext" Name="AttachmentDropDown" @bind-Value="card.AttachmentId" Data="@attachmentList" ValueProperty="AttachmentId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering>
                                     <Template>
                                         Navn: @AttachmentContext.AttachmentName - Aktiv: @(@AttachmentContext.Active ? "Ja" : "Nej")
                                        </Template>
                                    </RadzenDropDownDataGrid>
                                </RadzenFormField>
                            </RadzenColumn>
                             <RadzenColumn>
                                <RadzenFormField Variant="@variant">
                                    <RadzenRadioButtonList Name="Active" @bind-Value="card.Active" TValue="bool">
                                        <Items>
                                            <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                            <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                        </Items>
                                    </RadzenRadioButtonList>
                                </RadzenFormField>
                            </RadzenColumn>
                                </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                                <RadzenPickList Style="width:100%;" Multiple Context="ResultContext" @bind-Target="@card.Results" @bind-Source="@resultList" TextProperty="@nameof(Models.DTO.ResultDto.ResultText)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte resultater
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte resultater
                                 </TargetHeader>
                                 <Template>
                                     resultat: @ResultContext.ResultText - Aktiv: @(@ResultContext.Active ? "Ja" : "Nej")
                                    </Template>
                                </RadzenPickList>
                        </RadzenRow>

                        <RadzenRow>
                                <RadzenPickList Style="width:100%;" Multiple Context="TypeContext" @bind-Target="@card.Types" @bind-Source="@typeList" TextProperty="@nameof(Models.DTO.TypeDto.CardTypeName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte typer
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte typer
                                 </TargetHeader>
                                 <Template>
                                     Type: @TypeContext.CardTypeName - Aktiv: @(@TypeContext.Active ? "Ja" : "Nej")
                                    </Template>
                                </RadzenPickList>
                        </RadzenRow>
                    </RadzenTemplateForm>
                </RadzenStack>
                </RadzenCard>
            }
        }
        else if (workingType == "attachment")
        {
            <div>
                <EditForm Model="@attachment" OnValidSubmit="@CreateAttachment">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="attachmentName">Navn</label>
                        <InputText type="text" required id="attachmentName" @bind-Value="attachment.AttachmentName" />
                    </div>
                    <div>
                        <label for="active">Aktiv</label>
                        <InputCheckbox type="checkbox" id="active" @bind-Value="attachment.Active" />
                    </div>
                    <div>
                        <label for="attachmentUrl">Fil:</label>
                        <InputFile OnChange="HandleFileSelected" />
                    </div>
                    <button type="submit">Submit</button>
                </EditForm>
            </div>
        }
        else if (workingType == "result")
        {
            @* <div>
                <EditForm Model="@result" OnValidSubmit="@CreateResult">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="resultText">Tekst</label>
                        <InputText type="text" required id="resultText" @bind-Value="result.ResultText" />
                    </div>
                    <div>
                        <label for="active">Aktiv</label>
                        <InputCheckbox type="checkbox" id="active" @bind-Value="result.Active" />
                    </div>
                    <div>
                        <label for="attachment">Vedhæftning</label>
                        <InputSelect name="attachment" @bind-Value="attachmentId">
                            @foreach (var att in attachmentList)
                            {
                                if (att.Active == true)
                                {
                                    <option value="@att.AttachmentId">@att.AttachmentName</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <button type="submit">Submit</button>
                </EditForm>
            </div> *@
        }
        else if (workingType == "type")
        {
            <div>
                <EditForm Model="@type" OnValidSubmit="CreateType">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="cardTypeName">Navn</label>
                        <InputText type="text" required id="cardTypeName" @bind-Value="type.CardTypeName" />
                    </div>
                    <div>
                        <label for="active">Aktiv</label>
                        <InputCheckbox type="checkbox" id="active" @bind-Value="type.Active" />
                    </div>
                    <button type="submit">Submit</button>
                </EditForm>
            </div>
        }
        else if (workingType == "typeCategoryList")
        {
            @* <div>
                <EditForm Model="@typeCategoryList" OnValidSubmit="CreateTypeCategoryList">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="typeCategoryListName">Navn</label>
                        <InputText type="text" required id="typeCategoryListName" @bind-Value="typeCategoryList.TypeCategoryListName" />
                    </div>
                    <div>
                        <label for="active">Aktiv</label>
                        <InputCheckbox type="checkbox" id="active" @bind-Value="typeCategoryList.Active" />
                    </div>
                    <div>
                        <label for="type">Typer</label>
                        <InputSelect multiple name="type" @bind-Value="selectedTypeIds">
                            @foreach (var type in typeList)
                            {
                                if (type.Active == true)
                                {
                                    <option value="@type.TypeId">@type.CardTypeName</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <button type="submit">Submit</button>
                </EditForm>
            </div> *@
        }
    }
    else
    {
        <p>Der er ikke valgt en handling</p>
        <p class="error">@errorMessage</p>

    }

</div>




@code {
    private string workingType = "";
    private bool createType = false;
    private bool editType = false;
    private string errorMessage = "";
    private CardDto card = new();
    private AttachmentDto attachment = new();
    private ResultDto result = new();
    private TypeDto type = new();
    private TypeCategoryListDto typeCategoryList = new();

    private List<CardDto> _cardList;
    private List<AttachmentDto> _attachmentList;
    private List<ResultDto> _resultList;
    private List<TypeDto> _typeList;
    private List<TypeCategoryListDto> _typeCategoryListList;


    private IEnumerable<CardDto> cardList;
    private IEnumerable<AttachmentDto> attachmentList;
    private IEnumerable<ResultDto> resultList;
    private IEnumerable<TypeDto> typeList;
    private IEnumerable<TypeCategoryListDto> typeCategoryListList;
    private string attachmentDirectory = "/Development/Attachments/";

    Variant variant = Variant.Filled;


    // int attachmentId = 0;
    // int[] selectedResultIds = [];
    // int[] selectedTypeIds = [];

    private IBrowserFile? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _attachmentList = await GetAttachments();
            _cardList = await GetCards();
            _resultList = await GetResults();
            _typeList = await GetTypes();
            _typeCategoryListList = await GetTypeCategoryLists();
        }
        catch (Exception ex)
        {

            errorMessage = ex.Message;
        }
        finally
        {

        }

    }

    private void ChangeTypeToBeCreated(string type)
    {
        workingType = type;
    }
    private void SetCreateType()
    {
        ResetWork();
        createType = true;
        editType = false;
    }
    private void SetEditType()
    {
        ResetWork();
        createType = false;
        editType = true;
    }

    private void ResetWork()
    {
        workingType = "";
        card = new();
        attachment = new();
        result = new();
        type = new();
        typeCategoryList = new();
        cardList = new List<CardDto>(_cardList);
        attachmentList = new List<AttachmentDto>(_attachmentList);
        resultList = new List<ResultDto>(_resultList);
        typeList = new List<TypeDto>(_typeList);
        typeCategoryListList = new List<TypeCategoryListDto>(_typeCategoryListList);
    }

    private async Task<List<AttachmentDto>> GetAttachments()
    {
        var result = await _attachmentService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle vedhæftninger.";
            return new List<AttachmentDto>();
        }
        return result;
    }

    private async Task<List<ResultDto>> GetResults()
    {
        var result = await _resultService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle resultater.";
            return new List<ResultDto>();
        }
        return result;
    }

    private async Task<List<TypeDto>> GetTypes()
    {
        var result = await _typeService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle typer.";
            return new List<TypeDto>();
        }
        return result;
    }

    private async Task<List<TypeCategoryListDto>> GetTypeCategoryLists()
    {
        var result = await _typeCategoryListService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle type kategorier.";
            return new List<TypeCategoryListDto>();
        }
        return result;

    }

    private async Task<List<CardDto>> GetCards(){
        var result = await _cardService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle kort.";
            return new List<CardDto>();
        }
        return result;
    }
    private async void CreateCard()
    {
        var entity = card;
        // if (attachmentId > 0)
        // {
        //     entity.Attachment = attachmentList.FirstOrDefault(x => x.AttachmentId == attachmentId);

        // }
        // if (selectedResultIds.Length > 0)
        // {
        //     entity.Results = resultList.Where(x => selectedResultIds.Contains(x.ResultId)).ToList();
        // }
        // if (selectedTypeIds.Length > 0)
        // {
        //     entity.Types = typeList.Where(x => selectedTypeIds.Contains(x.TypeId)).ToList();
        // }
        var result = await _cardService.Create(entity);
        if (result is not null)
        {
            cardList.ToList().Add(result);
            createType = false;
            ResetWork();
            StateHasChanged();
        }
    }

    private async void CreateAttachment()
    {
        if (selectedFile == null)
        {
            errorMessage = "Please select a file to upload.";
            return;
        }

        Directory.CreateDirectory(Path.GetDirectoryName($"{attachmentDirectory}{attachment.AttachmentUrl}")); // Ensure the directory exists

        using (var stream = new FileStream($"{attachmentDirectory}{attachment.AttachmentUrl}", FileMode.Create))
        {
            await selectedFile.OpenReadStream().CopyToAsync(stream);
        }
        var result = await _attachmentService.Create(attachment);
        if (result is not null)
        {
            attachmentList.ToList().Add(result);
            createType = false;
            ResetWork();
            StateHasChanged();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            var format = "image/png"; // You can add more formats if needed
            if (selectedFile.ContentType.StartsWith("image/png"))
            {
                var fileExtension = Path.GetExtension(selectedFile.Name);
                var randomFileName = $"{Guid.NewGuid()}{fileExtension}";


                attachment.AttachmentUrl = $"{randomFileName}";
            }
            else
            {
                errorMessage = "Please upload a valid png image file.";
            }
        }
    }

    private async void CreateResult()
    {
        var resultReceived = await _resultService.Create(result);
        if (resultReceived is not null)
        {
            resultList.ToList().Add(resultReceived);
            createType = false;
            ResetWork();
            StateHasChanged();
        }
    }

    private async void CreateType()
    {
        var result = await _typeService.Create(type);
        if (result is not null)
        {
            typeList.ToList().Add(result);
            createType = false;
            ResetWork();
            StateHasChanged();
        }
    }

    private async void CreateTypeCategoryList()
    {
        // if (selectedTypeIds.Length > 0)
        // {
        //     typeCategoryList.Types = typeList.Where(x => selectedTypeIds.Contains(x.TypeId)).ToList();
        // }
        var result = await _typeCategoryListService.Create(typeCategoryList);
        if (result is not null)
        {
            typeCategoryListList.ToList().Add(result);
            createType = false;
            ResetWork();
            StateHasChanged();
        }
    }

    private async void SelectCard(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int cardId))
        {
            if (cardId > 0)
            {
                card = await _cardService.GetByid(cardId);
                resultList = FilterResults(card.Results);
                typeList = FilterTypes(card.Types);
                // attachmentId = Convert.ToInt32(card.AttachmentId);
                // selectedResultIds = card.Results.Select(x => x.ResultId).ToArray();
                // selectedTypeIds = card.Types.Select(x => x.TypeId).ToArray();
                StateHasChanged();
            }
        }
    }

    private IEnumerable<ResultDto> FilterResults(IEnumerable<ResultDto> results)
    {
        return _resultList.Where(result => !results.Any(r => r.ResultId == result.ResultId)).ToList();
    }

    private IEnumerable<TypeDto> FilterTypes(IEnumerable<TypeDto> types)
    {
        return _typeList.Where(type => !types.Any(t => t.TypeId == type.TypeId)).ToList();
    }

    private async void UpdateCard()
    {
        
    }

    private void SetAttachmentId(int id)
    {
        //attachmentId = id;
    }


}
