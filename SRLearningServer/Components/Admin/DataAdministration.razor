@page "/admin/data"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using SRLearningServer.Components.Interfaces.FrontendServices
@using SRLearningServer.Components.Interfaces.Utilities
@using SRLearningServer.Components.Models.DTO
@using SRLearningServer.Components.Utilities

@attribute [Authorize(Roles = "Admin")]

@inject IFrontendAttachmentService _attachmentService
@inject IFrontendCardService _cardService
@inject IFrontendResultService _resultService
@inject IFrontendTypeService _typeService
@inject IFrontendTypeCategoryListService _typeCategoryListService
@inject INotificationUtility NotificationUtility
@inject DialogService _dialogService
@inject IActiveCheckService _activeCheckService
@inject IConfiguration _configuration

<PageTitle>Data administration</PageTitle>
<RadzenCard>
<h3>Data Administration</h3>
    <RadzenButton Click="SetCreateType" Text="Opret Ny" />
    <RadzenButton Click="SetEditType" Text="Opdater Eksisterende" />

</RadzenCard>
<RadzenCard>
    <RadzenText TextStyle="TextStyle.H3" Text="@($"{(createType == true ? "Opret" : "")}{(editType == true ? "Opdater" : "")}")"></RadzenText>

</RadzenCard>

<div>
    @if (createType == true || editType == true)
    {
        <RadzenCard>
            <RadzenLabel Component="EntitySelectionDropDown" Text="Vælg en data type du vil :" />
            <RadzenDropDown Name="EntitySelectionDropDown" TValue="string" @bind-Value=@workingType TextProperty="Text" ValueProperty="Value" Change="@SoftResetWork"
            Data="@(new [] {
                            new { Text = "Vælg data", Value=""},
                            new { Text = "Kort", Value = "card"},
                            new { Text = "Vedhæft", Value = "attachment"},
                            new { Text = "Resultat", Value = "result"},
                            new { Text = "Type", Value = "type"},
                            new { Text = "Type Kategori", Value = "typeCategoryList"}
                        })">
                
            </RadzenDropDown>
        </RadzenCard>
        
    }
    @if (createType == true)
    {
        if (workingType == "card")
        {
            <RadzenCard>
                <RadzenStack  class="rz-p-0 rz-p-md-12">
                    <h3>Opret Kort</h3>
                    <RadzenTemplateForm TItem="CardDto" Data=@card Submit="CreateCard">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="CardName" @bind-Value="card.CardName" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Navn er påkrævet" Component="CardName" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                <RadzenColumn>
                                    <RadzenFormField Text="Beskrivelse" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Name="CardText" @bind-Value="card.CardText" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Beskrivelse er påkrævet" Component="CardText" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                <RadzenColumn>
                                    <RadzenFormField Text="Vedhæftning" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                        <RadzenDropDownDataGrid Style="height:auto" Context="AttachmentContext" Name="AttachmentDropDown" @bind-Value="card.AttachmentId" Data="@attachmentList" ValueProperty="@nameof(AttachmentDto.AttachmentId)" TextProperty="@nameof(AttachmentDto.AttachmentName)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true">
                                            <Template>
                                                @if (AttachmentContext.Active == true)
                                                {
                                                    <span>Navn: @AttachmentContext.AttachmentName - Aktiv - @AttachmentContext.LastUpdated</span>
                                                }
                                                else
                                                {
                                                    <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv - @AttachmentContext.LastUpdated</span>
                                                }
                                                <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />
                                            </Template>
                                            <ValueTemplate>
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    @if (AttachmentContext.Active == true)
                                                    {
                                                        <span>Navn: @AttachmentContext.AttachmentName - Aktiv - @AttachmentContext.LastUpdated</span>
                                                    }
                                                    else
                                                    {
                                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv - @AttachmentContext.LastUpdated</span>
                                                    }
                                                    <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />

                                                </RadzenStack>
                                            </ValueTemplate>
                                        </RadzenDropDownDataGrid>
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Vedhæftning er påkrævet" Component="AttachmentDropDown" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                        <RadzenRadioButtonList Name="Active" @bind-Value="card.Active" TValue="bool">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                            </Items>
                                        </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="ResultContext" @bind-Target="@card.Results" @bind-Source="@resultList" TextProperty="@nameof(Models.DTO.ResultDto.ResultText)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte resultater
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte resultater
                             </TargetHeader>
                             <Template>
                                 @if (ResultContext.Active == true)
                                    {
                                        <span>resultat: @ResultContext.ResultText - Aktiv - @ResultContext.LastUpdated</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @ResultContext.ResultText - Inaktiv - @ResultContext.LastUpdated</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeContext" @bind-Target="@card.Types" @bind-Source="@typeList" TextProperty="@nameof(Models.DTO.TypeDto.CardTypeName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte typer
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte typer
                             </TargetHeader>
                             <Template>
                                 @if (TypeContext.Active == true)
                                    {
                                        <span>Type: @TypeContext.CardTypeName - Aktiv - @TypeContext.LastUpdated</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @TypeContext.CardTypeName - Inaktiv - @TypeContext.LastUpdated</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>

                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>



        }
        else if (workingType == "attachment")
        {

            <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <h3>Opret Vedhæftning</h3>
                    <RadzenTemplateForm TItem="AttachmentDto" Data=@attachment Submit="CreateAttachment">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="AttachmentName" @bind-Value="attachment.AttachmentName" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Navn er påkrævet" Component="AttachmentName" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenStack>
                                                <RadzenCard>
                                                    <label for="AttachmentSelect">Fil:</label>
                                                    <InputFile Required name="AttachmentSelect" OnChange="HandleFileSelected" />
                                                </RadzenCard>
                                                <RadzenImage Style="max-width:30vw; max-height:15vh; object-fit: contain;" Path="@($"{base64ImageString}")" AlternateText="Image" />
                                            </RadzenStack>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                            <RadzenRadioButtonList Name="Active" @bind-Value="attachment.Active" TValue="bool">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                    <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="ResultContext" @bind-Target="@attachment.Results" @bind-Source="@resultList" TextProperty="@nameof(Models.DTO.ResultDto.ResultText)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte resultater
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte resultater
                             </TargetHeader>
                             <Template>
                                 @if (ResultContext.Active == true)
                                    {
                                        <span>resultat: @ResultContext.ResultText - Aktiv - @ResultContext.LastUpdated</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @ResultContext.ResultText - Inaktiv - @ResultContext.LastUpdated</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@attachment.Cards" @bind-Source="@cardList" TextProperty="@nameof(Models.DTO.CardDto.CardName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte Kort
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte Kort
                             </TargetHeader>
                             <Template>
                                 @if (CardContext.Active == true)
                                    {
                                        <span>Type: @CardContext.CardName - Aktiv - @CardContext.LastUpdated</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @CardContext.CardName - Inaktiv - @CardContext.LastUpdated</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>

                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
        }
        else if (workingType == "result")
        {
            <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <h3>Opret Resultat</h3>
                    <RadzenTemplateForm TItem="ResultDto" Data=@result Submit="CreateResult">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Tekst" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="ResultText" @bind-Value="result.ResultText" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Tekst er påkrævet" Component="ResultText" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                

                                <RadzenColumn>
                                    <RadzenFormField Text="Vedhæftning" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenDropDownDataGrid Style="height:auto" Context="AttachmentContext" Name="AttachmentDropDown" @bind-Value="result.AttachmentId" Data="@attachmentList" ValueProperty="@nameof(AttachmentDto.AttachmentId)" TextProperty="@nameof(AttachmentDto.AttachmentName)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" AllowClear="true">
                                                <Template>
                                                    @if (AttachmentContext.Active == true)
                                                    {
                                                        <span>Navn: @AttachmentContext.AttachmentName - Aktiv - @AttachmentContext.LastUpdated</span>
                                                    }
                                                    else
                                                    {
                                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv - @AttachmentContext.LastUpdated</span>
                                                    }

                                                    <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />
                                                </Template>
                                                <ValueTemplate>
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        @if (AttachmentContext.Active == true)
                                                        {
                                                            <span>Navn: @AttachmentContext.AttachmentName - Aktiv - @AttachmentContext.LastUpdated</span>
                                                        }
                                                        else
                                                        {
                                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv - @AttachmentContext.LastUpdated</span>
                                                        }
                                                        <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />

                                                    </RadzenStack>
                                                </ValueTemplate>
                                            </RadzenDropDownDataGrid>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                            <RadzenRadioButtonList Name="Active" @bind-Value="result.Active" TValue="bool">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                    <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@result.Cards" @bind-Source="@cardList" TextProperty="@nameof(CardDto.CardName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte Kort
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte Kort
                             </TargetHeader>
                             <Template>
                                 @if (CardContext.Active == true)
                                    {
                                        <span>resultat: @CardContext.CardName - Aktiv - @CardContext.LastUpdated</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @CardContext.CardName - Inaktiv - @CardContext.LastUpdated</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>

                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
            
        }
        else if (workingType == "type")
        {
            <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <h3>Opret Type</h3>
                    <RadzenTemplateForm TItem="TypeDto" Data=@type Submit="CreateType">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="CardTypeName" @bind-Value="type.CardTypeName" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Navn er påkrævet" Component="CardTypeName" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                            <RadzenRadioButtonList Name="Active" @bind-Value="type.Active" TValue="bool">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                    <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@type.Cards" @bind-Source="@cardList" TextProperty="@nameof(CardDto.CardName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte Kort
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte Kort
                             </TargetHeader>
                             <Template>
                                 @if (CardContext.Active == true)
                                    {
                                        <span>Kort: @CardContext.CardName - Aktiv - @CardContext.LastUpdated</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Kort: @CardContext.CardName - Inaktiv - @CardContext.LastUpdated</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeCategoryContext" @bind-Target="@type.TypeCategoryLists" @bind-Source="@typeCategoryListList" TextProperty="@nameof(TypeCategoryListDto.TypeCategoryListName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte type kategorier
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte type kategorier
                             </TargetHeader>
                             <Template>
                                 @if (TypeCategoryContext.Active == true)
                                    {
                                        <span>Type kategori: @TypeCategoryContext.TypeCategoryListName - Aktiv - @TypeCategoryContext.LastUpdated</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type kategori: @TypeCategoryContext.TypeCategoryListName - Inaktiv - @TypeCategoryContext.LastUpdated</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>

                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
        }
        else if (workingType == "typeCategoryList")
        {
            <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <h3>Opret Type Kategori</h3>
                    <RadzenTemplateForm TItem="TypeCategoryListDto" Data=@typeCategoryList Submit="CreateTypeCategoryList">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="TypeCategoryName" @bind-Value="typeCategoryList.TypeCategoryListName" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Navn er påkrævet" Component="TypeCategoryName" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                            <RadzenRadioButtonList Name="Active" @bind-Value="typeCategoryList.Active" TValue="bool">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                    <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeContext" @bind-Target="@typeCategoryList.Types" @bind-Source="@typeList" TextProperty="@nameof(TypeDto.CardTypeName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte typer
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte typer
                             </TargetHeader>
                             <Template>
                                 @if (TypeContext.Active == true)
                                    {
                                        <span>Type: @TypeContext.CardTypeName - Aktiv - @TypeContext.LastUpdated</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @TypeContext.CardTypeName - Inaktiv - @TypeContext.LastUpdated</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>

                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
            
        }

    }
    else if (editType == true)
    {
        if (workingType == "card")
        {
            <RadzenCard >
                <RadzenLabel Text="Vælg Kort" Component="EntitySelectionDropDown" />
                <RadzenDropDownDataGrid Style="width:auto" Name="EntitySelectionDropDown" TValue="int" Data="@_cardList" ValueProperty="@nameof(CardDto.CardId)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" AllowClear=true
                Change="@SelectCard">
                    <Template>
                        @if (context.Active == true)
                        {
                            <span>Navn: @context.CardName - Aktiv - @context.LastUpdated</span>
                        }
                        else
                        {
                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @context.CardName - Inaktiv - @context.LastUpdated</span>
                        }

                    </Template>
                </RadzenDropDownDataGrid>
            </RadzenCard>
            
            if (card.CardId > 0)
            {
                <RadzenCard>
                    <RadzenStack class="rz-p-0 rz-p-md-12">
                        <h3>Opdater Kort</h3>
                        <RadzenTemplateForm TItem="CardDto" Data=@card Submit="UpdateCard">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="12">
                                    <RadzenColumn Size="12">
                                        <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenTextBox Style="width: 100%" Name="CardName" @bind-Value="card.CardName" />
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Navn er påkrævet" Component="CardName" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>

                                    <RadzenColumn>
                                        <RadzenFormField Text="Beskrivelse" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenTextBox Name="CardText" @bind-Value="card.CardText" />
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Beskrivelse er påkrævet" Component="CardText" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>

                                    <RadzenColumn>
                                        <RadzenFormField Text="Vedhæftning" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenDropDownDataGrid Style="height:auto" Context="AttachmentContext" Name="AttachmentDropDown" @bind-Value="card.AttachmentId" Data="@attachmentList" ValueProperty="@nameof(AttachmentDto.AttachmentId)" TextProperty="@nameof(AttachmentDto.AttachmentName)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true">
                                                    <Template>
                                                        @if (AttachmentContext.Active == true)
                                                        {
                                                            <span>Navn: @AttachmentContext.AttachmentName - Aktiv - @AttachmentContext.LastUpdated</span>
                                                        }
                                                        else
                                                        {
                                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv - @AttachmentContext.LastUpdated</span>
                                                        }
                                                        <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />

                                                    </Template>
                                                    <ValueTemplate>
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    @if (AttachmentContext.Active == true)
                                                    {
                                                        <span>Navn: @AttachmentContext.AttachmentName - Aktiv - @AttachmentContext.LastUpdated</span>
                                                    }
                                                    else
                                                    {
                                                                <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv - @AttachmentContext.LastUpdated</span>
                                                    }
                                                    <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />

                                                </RadzenStack>
                                            </ValueTemplate>
                                                </RadzenDropDownDataGrid>
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Vedhæftning er påkrævet" Component="AttachmentDropDown" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                    <RadzenColumn>
                                        <RadzenFormField Variant="@variant">
                                            <ChildContent>
                                                <RadzenRadioButtonList Name="Active" @bind-Value="card.Active" TValue="bool">
                                                    <Items>
                                                        <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                        <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                    </Items>
                                                </RadzenRadioButtonList>
                                            </ChildContent>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="ResultContext" @bind-Target="@card.Results" @bind-Source="@resultList" TextProperty="@nameof(Models.DTO.ResultDto.ResultText)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte resultater
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte resultater
                                 </TargetHeader>
                                 <Template>
                                     @if (ResultContext.Active == true)
                                        {
                                            <span>resultat: @ResultContext.ResultText - Aktiv - @ResultContext.LastUpdated</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @ResultContext.ResultText - Inaktiv - @ResultContext.LastUpdated</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>

                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeContext" @bind-Target="@card.Types" @bind-Source="@typeList" TextProperty="@nameof(Models.DTO.TypeDto.CardTypeName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte typer
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte typer
                                 </TargetHeader>
                                 <Template>
                                     @if (TypeContext.Active == true)
                                        {
                                            <span>Type: @TypeContext.CardTypeName - Aktiv - @TypeContext.LastUpdated</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @TypeContext.CardTypeName - Inaktiv - @TypeContext.LastUpdated</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>
                            <RadzenCard>
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Button" Text="Deaktiver" Click="Deactivate"></RadzenButton>
                                <RadzenButton Style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)' ButtonType="ButtonType.Button" Text="Slet" Click="Delete"></RadzenButton>
                            </RadzenCard>

                        </RadzenTemplateForm>
                    </RadzenStack>
                </RadzenCard>
            }
        }
        else if (workingType == "attachment")
        {
            <RadzenCard>
                <RadzenLabel Text="Vælg Vedhæft" Component="EntitySelectionDropDown" />
                <RadzenDropDownDataGrid Name="EntitySelectionDropDown" TValue="int" Data="@_attachmentList" ValueProperty="@nameof(AttachmentDto.AttachmentId)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                        Change="@SelectAttachment">
                    <Template>
                        @if (context.Active == true)
                        {
                            <span>Navn: @context.AttachmentName - Aktiv - @context.LastUpdated</span>
                        }
                        else
                        {
                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @context.AttachmentName- Inaktiv - @context.LastUpdated</span>
                        }
                        <RadzenImage Path="@($"{attachmentReadDirectory}{context.AttachmentUrl}")" Style="width: 4rem;" />

                    </Template>
                </RadzenDropDownDataGrid>
            </RadzenCard>
            @if(attachment.AttachmentId > 0)
            {
                <RadzenCard>
                    <RadzenStack class="rz-p-0 rz-p-md-12">
                        <h3>Opret Vedhæftning</h3>
                        <RadzenTemplateForm TItem="AttachmentDto" Data=@attachment Submit="UpdateAttachment">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="12">
                                    <RadzenColumn Size="12">
                                        <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenTextBox Style="width: 100%" Name="AttachmentName" @bind-Value="attachment.AttachmentName" />
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Navn er påkrævet" Component="AttachmentName" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>

                                    <RadzenColumn>
                                        <RadzenFormField Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenStack>
                                                    <RadzenCard>
                                                        <label for="AttachmentSelect">Fil:</label>
                                                        <InputFile name="AttachmentSelect" OnChange="HandleFileSelected" />
                                                        @if (string.IsNullOrEmpty(base64ImageString))
                                                        {
                                                            <RadzenImage Path="@($"{attachmentReadDirectory}{attachment.AttachmentUrl}")" />
                                                        }
                                                        else
                                                        {
                                                            <RadzenImage Path="@($"{base64ImageString}")" />
                                                        }
                                                    </RadzenCard>
                                                </RadzenStack>
                                            </ChildContent>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                    <RadzenColumn>
                                        <RadzenFormField Variant="@variant">
                                            <ChildContent>
                                                <RadzenRadioButtonList Name="Active" @bind-Value="attachment.Active" TValue="bool">
                                                    <Items>
                                                        <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                        <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                    </Items>
                                                </RadzenRadioButtonList>
                                            </ChildContent>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="ResultContext" @bind-Target="@attachment.Results" @bind-Source="@resultList" TextProperty="@nameof(Models.DTO.ResultDto.ResultText)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte resultater
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte resultater
                                 </TargetHeader>
                                 <Template>
                                     @if (ResultContext.Active == true)
                                        {
                                            <span>resultat: @ResultContext.ResultText - Aktiv - @ResultContext.LastUpdated</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @ResultContext.ResultText - Inaktiv - @ResultContext.LastUpdated</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>

                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@attachment.Cards" @bind-Source="@cardList" TextProperty="@nameof(Models.DTO.CardDto.CardName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte Kort
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte Kort
                                 </TargetHeader>
                                 <Template>
                                     @if (CardContext.Active == true)
                                        {
                                            <span>Type: @CardContext.CardName - Aktiv - @CardContext.LastUpdated</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @CardContext.CardName - Inaktiv - @CardContext.LastUpdated</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>
                            <RadzenCard>
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Button" Text="Deaktiver" Click="Deactivate"></RadzenButton>
                                <RadzenButton Style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)' ButtonType="ButtonType.Button" Text="Slet" Click="Delete"></RadzenButton>
                            </RadzenCard>

                        </RadzenTemplateForm>
                    </RadzenStack>
                </RadzenCard>
            }
        }
        else if (workingType == "result")
        {
            <RadzenCard>
                <RadzenLabel Text="Vælg Resultat" Component="EntitySelectionDropDown" />
                <RadzenDropDownDataGrid Name="EntitySelectionDropDown" TValue="int" Data="@_resultList" ValueProperty="@nameof(ResultDto.ResultId)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                        Change="@SelectResult">
                    <Template>
                        @if (context.Active == true)
                        {
                            <span>Tekts: @context.ResultText - Aktiv - @context.LastUpdated</span>
                        }
                        else
                        {
                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Tekst: @context.ResultText - Inaktiv - @context.LastUpdated</span>
                        }

                    </Template>
                </RadzenDropDownDataGrid>
            </RadzenCard>
            @if(result.ResultId > 0)
            {

            <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <h3>Opdater Resultat</h3>
                    <RadzenTemplateForm TItem="ResultDto" Data=@result Submit="UpdateResult">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                        <RadzenFormField Text="Tekst" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="ResultText" @bind-Value="result.ResultText" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Tekst er påkrævet" Component="ResultText" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>



                                <RadzenColumn>
                                        <RadzenFormField Text="Vedhæftning" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                                <RadzenDropDownDataGrid Style="height:auto" Context="AttachmentContext" Name="AttachmentDropDown" @bind-Value="result.AttachmentId" Data="@attachmentList" ValueProperty="@nameof(AttachmentDto.AttachmentId)" TextProperty="@nameof(AttachmentDto.AttachmentName)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true">
                                                <Template>
                                                    @if (AttachmentContext.Active == true)
                                                    {
                                                        <span>Navn: @AttachmentContext.AttachmentName - Aktiv - @AttachmentContext.LastUpdated</span>
                                                    }
                                                    else
                                                    {
                                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv - @AttachmentContext.LastUpdated</span>
                                                    }
                                                        <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />
                                                </Template>
                                                    <ValueTemplate>
                                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                            @if (AttachmentContext.Active == true)
                                                            {
                                                                <span>Navn: @AttachmentContext.AttachmentName - Aktiv - @AttachmentContext.LastUpdated</span>
                                                            }
                                                            else
                                                            {
                                                                <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv - @AttachmentContext.LastUpdated</span>
                                                            }
                                                            <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />

                                                        </RadzenStack>
                                                    </ValueTemplate>
                                            </RadzenDropDownDataGrid>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                            <RadzenRadioButtonList Name="Active" @bind-Value="result.Active" TValue="bool">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                    <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@result.Cards" @bind-Source="@cardList" TextProperty="@nameof(CardDto.CardName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte Kort
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte Kort
                             </TargetHeader>
                             <Template>
                                 @if (CardContext.Active == true)
                                    {
                                        <span>resultat: @CardContext.CardName - Aktiv - @CardContext.LastUpdated</span>
                                    }
                                    else
                                    {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @CardContext.CardName - Inaktiv - @CardContext.LastUpdated</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        <RadzenCard>
                                <RadzenCard>
                                    <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>
                                    <RadzenButton ButtonType="ButtonType.Button" Text="Deaktiver" Click="Deactivate"></RadzenButton>
                                    <RadzenButton Style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)' ButtonType="ButtonType.Button" Text="Slet" Click="Delete"></RadzenButton>
                                </RadzenCard>
                        </RadzenCard>
                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
            }
        }
        else if (workingType == "type")
        {
            <RadzenCard>
                <RadzenLabel Text="Vælg Type" Component="EntitySelectionDropDown" />
                <RadzenDropDownDataGrid Name="EntitySelectionDropDown" TValue="int" Data="@_typeList" ValueProperty="@nameof(TypeDto.TypeId)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                        Change="@SelectType">
                    <Template>
                        @if (context.Active == true)
                        {
                            <span>Navn: @context.CardTypeName - Aktiv - @context.LastUpdated</span>
                        }
                        else
                        {
                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @context.CardTypeName - Inaktiv - @context.LastUpdated</span>
                        }

                    </Template>
                </RadzenDropDownDataGrid>
            </RadzenCard>
            @if (type.TypeId > 0)
            {
                <RadzenCard>
                    <RadzenStack class="rz-p-0 rz-p-md-12">
                        <h3>Opdater Type</h3>
                        <RadzenTemplateForm TItem="TypeDto" Data=@type Submit="UpdateType">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="12">
                                    <RadzenColumn Size="12">
                                        <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenTextBox Style="width: 100%" Name="CardTypeName" @bind-Value="type.CardTypeName" />
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Navn er påkrævet" Component="CardTypeName" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>

                                    <RadzenColumn>
                                        <RadzenFormField Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenRadioButtonList Name="Active" @bind-Value="type.Active" TValue="bool">
                                                    <Items>
                                                        <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                        <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                    </Items>
                                                </RadzenRadioButtonList>
                                            </ChildContent>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@type.Cards" @bind-Source="@cardList" TextProperty="@nameof(CardDto.CardName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte Kort
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte Kort
                                 </TargetHeader>
                                 <Template>
                                     @if (CardContext.Active == true)
                                        {
                                            <span>Kort: @CardContext.CardName - Aktiv - @CardContext.LastUpdated</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Kort: @CardContext.CardName - Inaktiv - @CardContext.LastUpdated</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>

                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeCategoryContext" @bind-Target="@type.TypeCategoryLists" @bind-Source="@typeCategoryListList" TextProperty="@nameof(TypeCategoryListDto.TypeCategoryListName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte type kategorier
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte type kategorier
                                 </TargetHeader>
                                 <Template>
                                     @if (TypeCategoryContext.Active == true)
                                        {
                                            <span>Type kategori: @TypeCategoryContext.TypeCategoryListName - Aktiv - @TypeCategoryContext.LastUpdated</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type kategori: @TypeCategoryContext.TypeCategoryListName - Inaktiv - @TypeCategoryContext.LastUpdated</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>
                            <RadzenCard>
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Button" Text="Deaktiver" Click="Deactivate"></RadzenButton>
                                <RadzenButton Style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)' ButtonType="ButtonType.Button" Text="Slet" Click="Delete"></RadzenButton>
                            </RadzenCard>

                        </RadzenTemplateForm>
                    </RadzenStack>
                </RadzenCard>
            }
        }
        else if (workingType == "typeCategoryList")
        {
            <RadzenCard>
                <RadzenLabel Text="Vælg Type Kategori" Component="EntitySelectionDropDown" />
                <RadzenDropDownDataGrid Name="EntitySelectionDropDown" TValue="int" Data="@_typeCategoryListList" ValueProperty="@nameof(TypeCategoryListDto.TypeCategoryListId)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                        Change="@SelectTypeCategory">
                    <Template>
                        @if (context.Active == true)
                        {
                            <span>Navn: @context.TypeCategoryListName - Aktiv - @context.LastUpdated</span>
                        }
                        else
                        {
                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @context.TypeCategoryListName - Inaktiv - @context.LastUpdated</span>
                        }

                    </Template>
                </RadzenDropDownDataGrid>
            </RadzenCard>
            @if (typeCategoryList.TypeCategoryListId > 0)
            {
                <RadzenCard>
                    <RadzenStack class="rz-p-0 rz-p-md-12">
                        <h3>Opdater Type Kategori</h3>
                        <RadzenTemplateForm TItem="TypeCategoryListDto" Data=@typeCategoryList Submit="UpdateTypeCategoryList">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="12">
                                    <RadzenColumn Size="12">
                                        <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenTextBox Style="width: 100%" Name="TypeCategoryName" @bind-Value="typeCategoryList.TypeCategoryListName" />
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Navn er påkrævet" Component="TypeCategoryName" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>

                                    <RadzenColumn>
                                        <RadzenFormField Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenRadioButtonList Name="Active" @bind-Value="typeCategoryList.Active" TValue="bool">
                                                    <Items>
                                                        <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                        <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                    </Items>
                                                </RadzenRadioButtonList>
                                            </ChildContent>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeContext" @bind-Target="@typeCategoryList.Types" @bind-Source="@typeList" TextProperty="@nameof(TypeDto.CardTypeName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte typer
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte typer
                                 </TargetHeader>
                                 <Template>
                                     @if (TypeContext.Active == true)
                                        {
                                            <span>Type: @TypeContext.CardTypeName - Aktiv - @TypeContext.LastUpdated</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @TypeContext.CardTypeName - Inaktiv - @TypeContext.LastUpdated</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>
                            <RadzenCard>
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Button" Text="Deaktiver" Click="Deactivate"></RadzenButton>
                                <RadzenButton Style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)' ButtonType="ButtonType.Button" Text="Slet" Click="Delete"></RadzenButton>
                            </RadzenCard>

                        </RadzenTemplateForm>
                    </RadzenStack>
                </RadzenCard>
            }
        }
    }
    else
    {
        <p>Der er ikke valgt en handling</p>
        <p class="error">@errorMessage</p>

    }

</div>




@code {
    private string workingType = "";
    private bool createType = false;
    private bool editType = false;
    private string errorMessage = "";
    private CardDto card = new();
    private AttachmentDto attachment = new();
    private ResultDto result = new();
    private TypeDto type = new();
    private TypeCategoryListDto typeCategoryList = new();
    private int value;

    private List<CardDto> _cardList;
    private List<AttachmentDto> _attachmentList;
    private List<ResultDto> _resultList;
    private List<TypeDto> _typeList;
    private List<TypeCategoryListDto> _typeCategoryListList;


    private IEnumerable<CardDto> cardList;
    private IEnumerable<AttachmentDto> attachmentList;
    private IEnumerable<ResultDto> resultList;
    private IEnumerable<TypeDto> typeList;
    private IEnumerable<TypeCategoryListDto> typeCategoryListList;
    private string attachmentReadDirectory = "/Development/Attachments/";
    private string attachmentCreateDirectory = "wwwroot//Development/Attachments/";
    private readonly string activityCheckFoundActiveTitle = "Der er fundet aktive relationer";
    private readonly string activityCheckFoundActiveMessage = "indeholder aktive relationer hvor denne ikke vil blive vist for brugerne. Er du sikker på at du vil fortsætte? følgende relationer er aktive";
    private readonly string activityCheckFoundInactiveTitle = "Der er fundet inaktive relationer";
    private readonly string activityCheckFoundInactiveMessage = "indeholder inaktive relationer der ikke vil blive vist for brugerne. Er du sikker på at du vil fortsætte? følgende relationer er inaktive";

    Variant variant = Variant.Filled;


    private IBrowserFile? selectedFile;
    private string base64ImageString = "";
    #region Initial
    protected override async Task OnInitializedAsync()
    {
        try
        {
            attachmentReadDirectory = $"{_configuration["AttachmentReadPath"]}";
            attachmentCreateDirectory = $"{_configuration["AttachmentWritePath"]}";
            _attachmentList = await GetAttachments();
            _cardList = await GetCards();
            _resultList = await GetResults();
            _typeList = await GetTypes();
            _typeCategoryListList = await GetTypeCategoryLists();
        }
        catch (Exception ex)
        {

            errorMessage = ex.Message;
        }
        finally
        {

        }

    }
    /// <summary>
    /// Sets the type of entity to be either created or edited.
    /// </summary>
    /// <param name="type"></param>
    private void ChangeTypeToBeCreated(string type)
    {
        workingType = type;
    }
    /// <summary>
    /// Sets the UI to create mode.
    /// </summary>
    private void SetCreateType()
    {
        ResetWork();
        createType = true;
        editType = false;
    }
    /// <summary>
    /// Sets the UI to edit mode.
    /// </summary>
    private void SetEditType()
    {
        ResetWork();
        createType = false;
        editType = true;
    }
    /// <summary>
    /// Resets the work variables including the workingType, resets the page back as it was when first loaded.
    /// </summary>
    private void ResetWork()
    {
        workingType = "";
        SoftResetWork();
    }
    /// <summary>
    /// Resets the work variables, but keeps the workingType. To continue working in the current setting but with new data.
    /// </summary>
    private void SoftResetWork() 
    {
        card = new();
        attachment = new();
        result = new();
        type = new();
        typeCategoryList = new();
        cardList = new List<CardDto>(_cardList);
        attachmentList = new List<AttachmentDto>(_attachmentList);
        resultList = new List<ResultDto>(_resultList);
        typeList = new List<TypeDto>(_typeList);
        typeCategoryListList = new List<TypeCategoryListDto>(_typeCategoryListList);
        base64ImageString = "";
        errorMessage = "";
    }
    #endregion
    #region GetLists
    /// <summary>
    /// Gets all the attachments from the database.
    /// </summary>
    /// <returns></returns>
    private async Task<List<AttachmentDto>> GetAttachments()
    {
        var result = await _attachmentService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle vedhæftninger.";
            NotificationUtility.SendErrorNotification($"{errorMessage}");
            return new List<AttachmentDto>();
        }
        return result;
    }
    /// <summary>
    /// Gets all the results from the database.
    /// </summary>
    /// <returns></returns>
    private async Task<List<ResultDto>> GetResults()
    {
        var result = await _resultService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle resultater.";
            NotificationUtility.SendErrorNotification($"{errorMessage}");
            return new List<ResultDto>();
        }
        return result;
    }
    /// <summary>
    /// Gets all the Types from the database.
    /// </summary>
    /// <returns></returns>
    private async Task<List<TypeDto>> GetTypes()
    {
        var result = await _typeService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle typer.";
            NotificationUtility.SendErrorNotification($"{errorMessage}");
            return new List<TypeDto>();
        }
        return result;
    }

    /// <summary>
    /// Gets all the TypeCategoryLists from the database.
    /// </summary>
    /// <returns></returns>
    private async Task<List<TypeCategoryListDto>> GetTypeCategoryLists()
    {
        var result = await _typeCategoryListService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle type kategorier.";
            NotificationUtility.SendErrorNotification($"{errorMessage}");
            return new List<TypeCategoryListDto>();
        }
        return result;

    }

    /// <summary>
    /// Gets all the Cards from the database.
    /// </summary>
    /// <returns></returns>
    private async Task<List<CardDto>> GetCards()
    {
        var result = await _cardService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle kort.";
            NotificationUtility.SendErrorNotification($"{errorMessage}");
            return new List<CardDto>();
        }
        return result;
    }
    #endregion
    #region CreateModels
    /// <summary>
    /// Creates a new card in the database.
    /// </summary>
    private async Task CreateCard()
    {
        var entity = card; // Sets the card property as the entity used in this method.

        var isValid = await CheckCard(entity); // Checks if all the relations has the same active status as the card. If not gives a promt to the user to decide if they want to continue with the creation or stop.
        if (isValid == false)
        {
            return;
        }
        var result = await _cardService.Create(entity); // Sends the card to the database to be created.
        if (result is not null)
        {
            _cardList.Add(result); // Adds the created card to the local list of cards.
                                   //createType = false;
            SoftResetWork();
            StateHasChanged();
            NotificationUtility.SendSuccessNotification("Kortet blev oprettet.");
        }
        else
        {
            NotificationUtility.SendErrorNotification("Der opstod en fejl under oprettelsen af kortet.");
        }
        return;
    }
    /// <summary>
    /// Creates an Attachment in the database.
    /// </summary>
    private async Task CreateAttachment()
    {
        if (selectedFile == null) // Checks if a file is selected for the Attachment.
        {
            NotificationUtility.SendErrorNotification("Vælg en fil at uploade.");
            errorMessage = "Please select a file to upload.";
            return;
        }
        var entity = attachment; // Sets the attachment property as the entity used in this method.
        var isValid = await CheckAttachment(entity); // Checks if all the relations has the same active status as the Attachment. If not gives a promt to the user to decide if they want to continue with the creation or stop.
        if (isValid == false)
        {
            return;
        }
        var result = await _attachmentService.Create(entity); // Sends the Attachment to the database to be created.
        if (result is not null)
        {
            _attachmentList.Add(result); // Adds the created Attachment to the local list of Attachments.
                                         //createType = false;
            await CreateFile();
            SoftResetWork();
            NotificationUtility.SendSuccessNotification("Vedhæftningen blev oprettet.");
            StateHasChanged();
        }
        else
        {
            NotificationUtility.SendErrorNotification("Der opstod en fejl under oprettelsen af vedhæftningen.");
        }
    }
    /// <summary>
    /// Handles the selection of a new file, checking if it is a valid file and then loading it into the UI.
    /// </summary>
    /// <param name="fileEvent"></param>
    /// <returns></returns>
    private async Task HandleFileSelected(InputFileChangeEventArgs fileEvent)
    {
        selectedFile = fileEvent.File; // Takes the file of the event and puts it into the IBrosweFile selectedFile
        if (selectedFile != null) // Checks if the file is not null
        {
            var format = "image/png"; // Sets the allowed file formats.
            if (selectedFile.ContentType.StartsWith(format))
            {
                if (string.IsNullOrEmpty(attachment.AttachmentUrl)) // If the attachment url is empty, it creates a new random file name.
                {
                    var fileExtension = Path.GetExtension(selectedFile.Name);
                    var randomFileName = $"{Guid.NewGuid()}{fileExtension}";
                    attachment.AttachmentUrl = $"{randomFileName}";        
                }


                await LoadImage(selectedFile); // Loads the image into the UI
            }
            else // If the file is not in the correct format give an error message.
            {
                selectedFile = null;
                base64ImageString = "";
                errorMessage = "Please upload a valid png image file.";
                NotificationUtility.SendNotification($"{errorMessage}");
            }
        }
        return;
    }
    /// <summary>
    /// Loads the Attachment image into the UI.
    /// </summary>
    /// <param name="imageFile"></param>
    /// <returns></returns>
    public async Task LoadImage(IBrowserFile imageFile)
    {
        var tempFile = await imageFile.RequestImageFileAsync("image/png", 100, 100);
        using Stream imageStream = tempFile.OpenReadStream(300 * 300 * 10);

        using MemoryStream ms = new();
        //copy imageStream to Memory stream
        await imageStream.CopyToAsync(ms);

        //convert stream to base64
        base64ImageString = $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
        StateHasChanged();

    }
    /// <summary>
    /// Creates a new Result in the database.
    /// </summary>
    /// <returns></returns>
    private async Task CreateResult()
    {
        var entity = result; // Sets the result as the entity used in this method.
        var isValid = await CheckResult(entity); // Checks if all the relations has the same active status as the Result. If not gives a promt to the user to decide if they want to continue with the creation or stop.
        if (isValid == false)
        {
            return;
        }
        var resultReceived = await _resultService.Create(entity); // Sends the Result to the database to be created.
        if (resultReceived is not null)
        {
            _resultList.Add(resultReceived); // Adds the created Result to the local list of Results.
                                             //createType = false;
            SoftResetWork();
            StateHasChanged();
            NotificationUtility.SendSuccessNotification("Resultatet blev oprettet.");
        }
        else
        {
            NotificationUtility.SendErrorNotification("Der opstod en fejl under oprettelsen af resultatet.");
        }
        return;
    }

    /// <summary>
    /// Creates a new Type in the database.
    /// </summary>
    /// <returns></returns>
    private async Task CreateType()
    {
        var entity = type; // Sets the type as the entity used in this method.
        var isValid = await CheckType(entity); // Checks if all the relations has the same active status as the Type. If not gives a promt to the user to decide if they want to continue with the creation or stop.
        if (isValid == false)
        {
            return;
        }
        var result = await _typeService.Create(entity); // Sends the Type to the database to be created.
        if (result is not null)
        {
            _typeList.Add(result); // Adds the created Type to the local list of Types.
                                   //createType = false;
            SoftResetWork();
            StateHasChanged();
            NotificationUtility.SendSuccessNotification("Typen blev oprettet.");
        }
        else
        {
            NotificationUtility.SendErrorNotification("Der opstod en fejl under oprettelsen af typen.");
        }
        return;
    }
    /// <summary>
    /// Creates a new TypeCategoryList in the database.
    /// </summary>
    /// <returns></returns>
    private async Task CreateTypeCategoryList()
    {
        var entity = typeCategoryList; // Sets the typeCategoryList as the entity used in this method.
        var isValid = await CheckTypeCategoryList(entity); // Checks if all the relations has the same active status as the TypeCategoryList. If not gives a promt to the user to decide if they want to continue with the creation or stop.
        if (isValid == false)
        {
            return;
        }
        var result = await _typeCategoryListService.Create(entity); // Sends the TypeCategoryList to the database to be created.
        if (result is not null)
        {
            _typeCategoryListList.Add(result); // Adds the created TypeCategoryList to the local list of TypeCategoryLists.
                                               //createType = false;
            SoftResetWork();
            StateHasChanged();
            NotificationUtility.SendSuccessNotification("Type kategorien blev oprettet.");
        }
        else
        {
            NotificationUtility.SendErrorNotification("Der opstod en fejl under oprettelsen af type kategorien.");
        }
        return;
    }
    #endregion
    #region SelectModels
    /// <summary>
    /// Gets the selected Card with the given id from the database. And populates the UI with the data.
    /// </summary>
    /// <param name="selectedEntity"></param>
    /// <returns></returns>
    private async Task SelectCard(object selectedEntity) //int entityId
    {
        int entityId = (int)selectedEntity; // Sets the id of the selected Card as the entityId used for this method.
        if (entityId > 0) // Checks if the id is above 0 and therefore culd exist in the database.
        {   
            var entity = await _cardService.GetByid(entityId); // Calls the database to get the Card by the given Id.
            card = new() // Sets the card property as the entity received from the database.
            {
                CardId = entity.CardId,
                CardName = entity.CardName,
                CardText = entity.CardText,
                Active = entity.Active,
                AttachmentId = entity.AttachmentId,
                Attachment = entity.Attachment,
                Results = entity.Results,
                Types = entity.Types
            };
            resultList = FilterResults(card.Results); // Filters the results list to only show the results that are not already in the selected entity.
            typeList = FilterTypes(card.Types); // Filters the types list to only show the types that are not already in the selected entity.
            StateHasChanged();
        }
        return;
    }
    /// <summary>
    /// Gets the selected Type with the given id from the database. And populates the UI with the data.
    /// </summary>
    /// <param name="selectedEntity"></param>
    /// <returns></returns>
    private async Task SelectType(object selectedEntity)
    {
        int entityId = (int)selectedEntity; // Sets the id of the selected Type as the entityId used for this method.
        if (entityId > 0) // Checks if the id is above 0 and therefore culd exist in the database.
        {
            var entity = await _typeService.GetById(entityId); // Calls the database to get the Type by the given Id.
            type = new() // Sets the type property as the entity received from the database.
            {
                TypeId = entity.TypeId,
                CardTypeName = entity.CardTypeName,
                Active = entity.Active,
                Cards = entity.Cards,
                TypeCategoryLists = entity.TypeCategoryLists
            };
            cardList = FilterCards(type.Cards); // Filters the cards list to only show the cards that are not already in the selected entity.
            typeCategoryListList = FilterTypeCategories(type.TypeCategoryLists); // Filters the typeCategoryList list to only show the typeCategoryLists that are not already in the selected entity.
            StateHasChanged();
        }
        return;
    }
    /// <summary>
    /// Gets the selected Result with the given id from the database. And populates the UI with the data.
    /// </summary>
    /// <param name="selectedEntity"></param>
    /// <returns></returns>
    private async Task SelectResult(object selectedEntity)
    {
        int entityId = (int)selectedEntity; // Sets the id of the selected Result as the entityId used for this method.

        if (entityId > 0) // Checks if the id is above 0 and therefore culd exist in the database.
        {
            var entity = await _resultService.GetById(entityId); // Calls the database to get the Result by the given Id.
            result = new() // Sets the result property as the entity received from the database.
            {
                ResultId = entity.ResultId,
                ResultText = entity.ResultText,
                Active = entity.Active,
                AttachmentId = entity.AttachmentId,
                Attachment = entity.Attachment,
                Cards = entity.Cards
            };
            cardList = FilterCards(result.Cards); // Filters the cards list to only show the cards that are not already in the selected entity.
            StateHasChanged();
        }

        return;
    }
    /// <summary>
    /// Gets the selected Attachment with the given id from the database. And populates the UI with the data.
    /// </summary>
    /// <param name="selectedEntity"></param>
    /// <returns></returns>
    private async Task SelectAttachment(object selectedEntity)
    {
        int entityId = (int)selectedEntity; // Sets the id of the selected Attachment as the entityId used for this method.
        if (entityId > 0) // Checks if the id is above 0 and therefore culd exist in the database.
        {
            var entity = await _attachmentService.GetById(entityId); // Calls the database to get the Attachment by the given Id.
            attachment = new() // Sets the attachment property as the entity received from the database.
            {
                AttachmentId = entity.AttachmentId,
                AttachmentName = entity.AttachmentName,
                AttachmentUrl = entity.AttachmentUrl,
                Active = entity.Active,
                Results = entity.Results,
                Cards = entity.Cards
            };
            resultList = FilterResults(attachment.Results); // Filters the results list to only show the results that are not already in the selected entity.
            cardList = FilterCards(attachment.Cards); // Filters the cards list to only show the cards that are not already in the selected entity.
            StateHasChanged();
        }
        return;
    }
    /// <summary>
    /// Gets the selected TypeCategoryList with the given id from the database. And populates the UI with the data.
    /// </summary>
    /// <param name="selectedEntity"></param>
    /// <returns></returns>
    private async Task SelectTypeCategory(object selectedEntity)
    {
        int entityId = (int)selectedEntity; // Sets the id of the selected TypeCategoryList as the entityId used for this method.
        if (entityId > 0) // Checks if the id is above 0 and therefore culd exist in the database.
        {
            var entity = await _typeCategoryListService.GetById(entityId); // Calls the database to get the TypeCategoryList by the given Id.
            typeCategoryList = new() // Sets the typeCategoryList property as the entity received from the database.
            {
                TypeCategoryListId = entity.TypeCategoryListId,
                TypeCategoryListName = entity.TypeCategoryListName,
                Active = entity.Active,
                Types = entity.Types
            };
            typeList = FilterTypes(typeCategoryList.Types); // Filters the types list to only show the types that are not already in the selected entity.
            StateHasChanged();
        }
        return;
    }

    #endregion
    #region SortLists
    /// <summary>
    /// Filters the results list to only show the results that are not already in the selected entity.
    /// </summary>
    /// <param name="results"></param>
    /// <returns></returns>
    private IEnumerable<ResultDto> FilterResults(IEnumerable<ResultDto> results)
    {
        return _resultList.Where(result => !results.Any(r => r.ResultId == result.ResultId)).ToList();
    }
    /// <summary>
    /// Filters the types list to only show the types that are not already in the selected entity.
    /// </summary>
    /// <param name="types"></param>
    /// <returns></returns>
    private IEnumerable<TypeDto> FilterTypes(IEnumerable<TypeDto> types)
    {
        return _typeList.Where(type => !types.Any(t => t.TypeId == type.TypeId)).ToList();
    }
    /// <summary>
    /// Filters the cards list to only show the cards that are not already in the selected entity.
    /// </summary>
    /// <param name="cards"></param>
    /// <returns></returns>
    private IEnumerable<CardDto> FilterCards(IEnumerable<CardDto> cards)
    {
        return _cardList.Where(card => !cards.Any(c => c.CardId == card.CardId)).ToList();
    }
    /// <summary>
    /// Filers the typeCategoryList list to only show the typeCategoryLists that are not already in the selected entity.
    /// </summary>
    /// <param name="tcls"></param>
    /// <returns></returns>
    private IEnumerable<TypeCategoryListDto> FilterTypeCategories(IEnumerable<TypeCategoryListDto> tcls)
    {
        return _typeCategoryListList.Where(tcl => !tcls.Any(t => t.TypeCategoryListId == tcl.TypeCategoryListId)).ToList();
    }
    #endregion
    #region UpdateModels
    /// <summary>
    /// Updates the Card loaded in the page in the database.
    /// </summary>
    private async Task UpdateCard()
    {
        var entity = card; // Sets the card property as the entity used in this method.
        if(entity.CardId > 0) // Checks if the CardId is above 0 as it otherwise could not exist in the database.
        {
            var isValid = await CheckCard(entity); // Checks if all the relations has the same active status as the Card. If not gives a promt to the user to decide if they want to continue with the creation or stop.
            if (isValid == false)
            {
                return;
            }
            var result = await _cardService.Update(entity); // Sends the Card to the database to be updated.
            if (result is not null)
            {
                int index = _cardList.FindIndex(x => x.CardId == result.CardId); // Finds the index of the updated Card in the local list of Cards, to replace it with the updated data.
                if (index != -1) // Checks if the card was found in the local list. If so, it replaces the data at the indexed location.
                {
                    _cardList[index] = result;
                    //createType = false;
                    SoftResetWork();
                    await SelectCard(result.CardId);
                    StateHasChanged();
                    NotificationUtility.SendSuccessNotification("Kortet blev opdateret.");
                }
                else{
                    NotificationUtility.SendErrorNotification("Der skete en fejl ved opdatering af kortet.");
                    errorMessage = "Der skete en fejl ved opdatering af kortet.";
                }
            }
            else{
                NotificationUtility.SendErrorNotification("Der skete en fejl ved opdatering af kortet.");
                errorMessage = "Der skete en fejl ved opdatering af kortet.";
            }
        }
    }

    private async void UpdateType(){
        var entity = type; // Sets the type property as the entity used in this method.

        if(entity.TypeId > 0) // Checks if the TypeId is above 0 as it otherwise could not exist in the database.
        {
            var isValid = await CheckType(entity); // Checks if all the relations has the same active status as the Type. If not gives a promt to the user to decide if they want to continue with the creation or stop.
            if (isValid == false)
            {
                return;
            }
            var result = await _typeService.Update(entity); // Sends the Type to the database to be updated.
            if (result is not null)
            {
                int index = _typeList.FindIndex(x => x.TypeId == result.TypeId); // Finds the index of the updated Type in the local list of Types, to replace it with the updated data.
                if (index != -1) // Checks if the Type was found in the local list. If so, it replaces the data at the indexed location.
                {
                    _typeList[index] = result;
                    //createType = false;
                    SoftResetWork();
                    await SelectType(result.TypeId);
                    StateHasChanged();
                    NotificationUtility.SendSuccessNotification("Typen blev opdateret.");
                }
                else{
                    NotificationUtility.SendErrorNotification("Der skete en fejl ved opdatering af typen.");
                    errorMessage = "Der skete en fejl ved opdatering af typen.";
                }
            }
            else{
                NotificationUtility.SendErrorNotification("Der skete en fejl ved opdatering af typen.");
                errorMessage = "Der skete en fejl ved opdatering af typen.";
            }

        }
    }

    private async void UpdateTypeCategoryList(){
        var entity = typeCategoryList; // Sets the typeCategoryList property as the entity used in this method.
        if(entity.TypeCategoryListId > 0) // Checks if the TypeCategoryListId is above 0 as it otherwise could not exist in the database.
        {
            var isValid = await CheckTypeCategoryList(entity); // Checks if all the relations has the same active status as the TypeCategoryList. If not gives a promt to the user to decide if they want to continue with the creation or stop.
            if(isValid == false)
            {
                return;
            }
            var result = await _typeCategoryListService.Update(entity); // Sends the TypeCategoryList to the database to be updated.
            if (result is not null)
            {
                int index = _typeCategoryListList.FindIndex(x => x.TypeCategoryListId == result.TypeCategoryListId); // Finds the index of the updated TypeCategoryList in the local list of TypeCategoryLists, to replace it with the updated data.
                if (index != -1) // Checks if the TypeCategoryList was found in the local list. If so, it replaces the data at the indexed location.
                {
                    _typeCategoryListList[index] = result;
                    //createType = false;
                    SoftResetWork();
                    await SelectTypeCategory(result.TypeCategoryListId);
                    StateHasChanged();
                    NotificationUtility.SendSuccessNotification("Type kategorien blev opdateret.");
                }
                else{
                    NotificationUtility.SendErrorNotification("Der skete en fejl ved opdatering af type kategorien.");
                    errorMessage = "Der skete en fejl ved opdatering af typen.";
                }
            }
            else{
                NotificationUtility.SendErrorNotification("Der skete en fejl ved opdatering af type kategorien.");
                errorMessage = "Der skete en fejl ved opdatering af typen.";
            }

        }
    }

    private async void UpdateResult()
    {
        var entity = result; // Sets the result property as the entity used in this method.
        if(entity.ResultId > 0) // Checks if the ResultId is above 0 as it otherwise could not exist in the database.
        {
            var isValid = await CheckResult(entity); // Checks if all the relations has the same active status as the Result. If not gives a promt to the user to decide if they want to continue with the creation or stop.
            if (isValid == false)
            {
                return;
            }    
            var resultReceived = await _resultService.Update(entity); // Sends the Result to the database to be updated.
            if (resultReceived is not null)
            {
                int index = _resultList.FindIndex(x => x.ResultId == resultReceived.ResultId); // Finds the index of the updated Result in the local list of Results, to replace it with the updated data.
                if (index != -1) // Checks if the Result was found in the local list. If so, it replaces the data at the indexed location.
                {
                    _resultList[index] = resultReceived;
                    //createType = false;
                    SoftResetWork();
                    await SelectResult(resultReceived.ResultId);
                    StateHasChanged();
                    NotificationUtility.SendSuccessNotification("Resultatet blev opdateret.");
                }
                else{
                    NotificationUtility.SendErrorNotification("Der skete en fejl ved opdatering af resultatet.");
                    errorMessage = "Der skete en fejl ved opdatering af resultatet.";
                }
            }
            else{
                NotificationUtility.SendErrorNotification("Der skete en fejl ved opdatering af resultatet.");
                errorMessage = "Der skete en fejl ved opdatering af resultatet.";
            }
        }
    }

    private async void UpdateAttachment()
    {
        var entity = attachment; // Sets the attachment property as the entity used in this method.
        if (entity.AttachmentId > 0) // Checks if the AttachmentId is above 0 as it otherwise could not exist in the database.
        {
            var isValid = await CheckAttachment(entity); // Checks if all the relations has the same active status as the Attachment. If not gives a promt to the user to decide if they want to continue with the creation or stop.
            if(isValid == false)
            {
                return;
            }
            if (selectedFile is not null) // If the selected file is not null, If the attachment already have a file it overwrites it. Otherwise it creates a new file in the directory.
            {
                await CreateFile();                
            }
            var result = await _attachmentService.Update(entity); // Sends the Attachment to the database to be updated.
            if (result is not null)
            {
                int index = _attachmentList.FindIndex(x => x.AttachmentId == result.AttachmentId); // Finds the index of the updated Attachment in the local list of Attachments, to replace it with the updated data.
                if (index != -1) // Checks if the Attachment was found in the local list. If so, it replaces the data at the indexed location.
                {
                    _attachmentList[index] = result;
                    //createType = false;
                    SoftResetWork();
                    await SelectAttachment(result.AttachmentId);
                    StateHasChanged();
                    NotificationUtility.SendSuccessNotification("Vedhæftningen blev opdateret.");
                }
                else{
                    NotificationUtility.SendErrorNotification("Der skete en fejl ved opdatering af vedhæftningen.");
                    errorMessage = "Der skete en fejl ved opdatering af vedhæftningen.";
                }
            }
            else{
                NotificationUtility.SendErrorNotification("Der skete en fejl ved opdatering af vedhæftningen.");
                errorMessage = "Der skete en fejl ved opdatering af vedhæftningen.";
            }
        }
    }
    #endregion

    private async Task CreateFile()
    {
        if(selectedFile is not null)
        {
            Directory.CreateDirectory(Path.GetDirectoryName($"{attachmentCreateDirectory}{attachment.AttachmentUrl}")); // Ensure the directory exists

            using (var stream = new FileStream($"{attachmentCreateDirectory}{attachment.AttachmentUrl}", FileMode.Create)) // If there already is a file with the same name it overwrites it. Otherwise it creates a new one.
            {
                await selectedFile.OpenReadStream().CopyToAsync(stream);
            }
        }
        return;
    }
    /// <summary>
    /// If a file exists with the given name, it is deleted from the directory.
    /// </summary>
    /// <param name="name"></param>
    private void DeleteFile(string name)
    {
        if (File.Exists($"{attachmentCreateDirectory}{name}"))
        {
            File.Delete($"{attachmentCreateDirectory}{name}");
        }
    }
    /// <summary>
    /// Deactivates the selected entity. This method is shared for all entity types.
    /// </summary>
    /// <returns></returns>
    private async Task Deactivate()
    {
        bool isValid = false; // I don't remember why I specified the IsValid as false here, it should be set regardless in the code below. TODO check if this is needed.
        if (workingType == "card") // If the workingType is set to card, it deactivates the card.
        {
            card.Active = false; // Ensures the card is inactive for the CheckCard.
            isValid = await CheckCard(card); // Checks if all the relations has the same active status as the Card. If not gives a promt to the user to decide if they want to continue with the creation or stop.
            if(isValid == true)
            {
                var entity = await _cardService.Deactivate(card.CardId); // Sends the Card to the database to be deactivated.
                if (entity is null)
                {
                    NotificationUtility.SendErrorNotification($"Fejl på deaktivering af kort med id:{card.CardId}");
                    errorMessage = $"Fejl på deaktivering af card med id:{card.CardId}";
                    return;
                }
                int index = _cardList.FindIndex(x => x.CardId == entity.CardId); // Finds the index of the deactivated Card in the local list of Cards, to replace it with the updated data.
                if (index != -1) // Checks if the Card was found in the local list. If so, it replaces the data at the indexed location.
                {
                    _cardList[index] = entity;
                    //createType = false;
                    SoftResetWork();
                    StateHasChanged();
                    NotificationUtility.SendSuccessNotification("Kortet blev deaktiveret.");
                }
            }

        }
        else if (workingType == "attachment") // If the workignType is set to Attachment, it deactivates the Attachment.
        {
            attachment.Active = false; // Ensures the Attachment is inactive for the CheckAttachment.
            isValid = await CheckAttachment(attachment); // Checks if all the relations has the same active status as the Attachment. If not gives a promt to the user to decide if they want to continue with the creation or stop.
            if (isValid == true)
            {
                var entity = await _attachmentService.Deactivate(attachment.AttachmentId); // Sends the Attachment to the database to be deactivated.
                if (entity is null)
                {
                    NotificationUtility.SendErrorNotification($"Fejl på deaktivering af vedhæftning med id:{attachment.AttachmentId}");
                    errorMessage = $"Fejl på deaktivering af vedhæftning med id:{attachment.AttachmentId}";
                    return;
                }
                int index = _attachmentList.FindIndex(x => x.AttachmentId == entity.AttachmentId); // Finds the index of the deactivated Attachment in the local list of Attachments, to replace it with the updated data.
                if (index != -1) // Checks if the Attachment was found in the local list. If so, it replaces the data at the indexed location.
                {
                    _attachmentList[index] = entity;
                    //createType = false;
                    SoftResetWork();
                    StateHasChanged();
                    NotificationUtility.SendSuccessNotification("Vedhæftningen blev deaktiveret.");
                }
            }
        }
        else if (workingType == "result") // If the workignType is set to Result, it deactivates the Result.
        {
            result.Active = false; // Ensures the Result is inactive for the CheckResult.
            isValid = await CheckResult(result); // Checks if all the relations has the same active status as the Result. If not gives a promt to the user to decide if they want to continue with the creation or stop.
            if (isValid == true)
            {
                var entity = await _resultService.Deactivate(result.ResultId); // Sends the Result to the database to be deactivated.
                if (entity is null)
                {
                    NotificationUtility.SendErrorNotification($"Fejl på deaktivering af resultat med id:{result.ResultId}");
                    errorMessage = $"Fejl på deaktivering af resultat med id:{result.ResultId}";
                    return;
                }
                int index = _resultList.FindIndex(x => x.ResultId == entity.ResultId); // Finds the index of the deactivated Result in the local list of Results, to replace it with the updated data.
                if (index != -1) // Checks if the Result was found in the local list. If so, it replaces the data at the indexed location.
                {
                    _resultList[index] = entity;
                    //createType = false;
                    SoftResetWork();
                    StateHasChanged();
                    NotificationUtility.SendSuccessNotification("Resultatet blev deaktiveret.");
                }
            }
        }
        else if (workingType == "type") // If the workignType is set to Type, it deactivates the Type.
        {
            type.Active = false; // Ensures the Type is inactive for the CheckType.
            isValid = await CheckType(type); // Checks if all the relations has the same active status as the Type. If not gives a promt to the user to decide if they want to continue with the creation or stop.
            if (isValid == true)
            {
                var entity = await _typeService.Deactivate(type.TypeId); // Sends the Type to the database to be deactivated.
                if (entity is null)
                {
                    NotificationUtility.SendErrorNotification($"Fejl på deaktivering af type med id:{type.TypeId}");
                    errorMessage = $"Fejl på deaktivering af type med id:{type.TypeId}";
                    return;
                }
                int index = _typeList.FindIndex(x => x.TypeId == entity.TypeId); // Finds the index of the deactivated Type in the local list of Types, to replace it with the updated data.
                if (index != -1) // Checks if the Type was found in the local list. If so, it replaces the data at the indexed location.
                {
                    _typeList[index] = entity;
                    //createType = false;
                    SoftResetWork();
                    StateHasChanged();
                    NotificationUtility.SendSuccessNotification("Typen blev deaktiveret.");
                }
            }
        }
        else if (workingType == "typeCategoryList") // If the workignType is set to TypeCategoryList, it deactivates the TypeCategoryList.
        {
            typeCategoryList.Active = false; // Ensures the TypeCategoryList is inactive for the CheckTypeCategoryList.
            isValid = await CheckTypeCategoryList(typeCategoryList); // Checks if all the relations has the same active status as the TypeCategoryList. If not gives a promt to the user to decide if they want to continue with the creation or stop.
            if (isValid == true)
            {
                var entity = await _typeCategoryListService.Deactivate(typeCategoryList.TypeCategoryListId); // Sends the TypeCategoryList to the database to be deactivated.
                if (entity is null)
                {
                    NotificationUtility.SendErrorNotification($"Fejl på deaktivering af type kategori med id:{typeCategoryList.TypeCategoryListId}");
                    errorMessage = $"Fejl på deaktivering af type kategori med id:{typeCategoryList.TypeCategoryListId}";
                    return;
                }
                int index = _typeCategoryListList.FindIndex(x => x.TypeCategoryListId == entity.TypeCategoryListId); // Finds the index of the deactivated TypeCategoryList in the local list of TypeCategoryLists, to replace it with the updated data.
                if (index != -1) // Checks if the TypeCategoryList was found in the local list. If so, it replaces the data at the indexed location.
                {
                    _typeCategoryListList[index] = entity;
                    //createType = false;
                    SoftResetWork();
                    StateHasChanged();
                    NotificationUtility.SendSuccessNotification("Type kategorien blev deaktiveret.");
                }
            }
        }
        return;
    }

    /// <summary>
    /// Deletes the selected entity. This method is shared for all the entity types.
    /// </summary>
    /// <returns></returns>
    private async Task Delete()
    {
        if (workingType == "card") // If the workingType is set to card, it deletes the card.
        {
            var entity = card; // Sets the card property as the entity used in this method.
            var isConfirmed = await ConfirmDialog("Slet kort", $"Er du sikker på at du vil slette kortet? <br> ID: {entity.CardId} <br> Navn: {entity.CardName} <br> Tekst: {entity.CardText}");
            if(isConfirmed == true)
            {
                try
                {
                    var result = await _cardService.Delete(entity.CardId); // Sends the Card to the database to be deleted.
                    if(result is not null)
                    {
                        int index = _cardList.FindIndex(c => c.CardId == result.CardId); // Finds the index of the deleted Card in the local list of Cards, to remove it from the list.
                        if (index != -1) // Checks if the Card was found in the local list. If so, it removes the data at the indexed location.
                        {
                            _cardList.RemoveAt(index);
                            
                        }

                        //createType = false;
                        //editType = false;
                        ResetWork();
                        StateHasChanged();
                        NotificationUtility.SendSuccessNotification("Kortet blev slettet.");
                    }
                    else
                    {
                        NotificationUtility.SendErrorNotification("Der opstod en fejl på sletning af kortet.");
                        errorMessage = $"Der opstod en fejl på sletning af kortet {entity.CardName}";
                    }

                }
                catch (Exception ex)
                {
                    NotificationUtility.SendErrorNotification("Der opstod en fejl på sletning af kortet.");
                    errorMessage = $"Der opstod en fejl på sletning af kortet {entity.CardName}, fejlbesked: {ex.Message}";
                }
            }

        }
        else if (workingType == "attachment") // If the workingType is set to Attachment, it deletes the attachment.
        {
            var entity = attachment; // Sets the attachment property as the entity used in this method.
            try
            {
                var isConfirmed = await ConfirmDialog("Slet vedhæftning", $"Er du sikker på at du vil slette kortet? <br> ID: {entity.AttachmentId} <br> Navn: {entity.AttachmentName}");
                if(isConfirmed == true)
                {
                    var result = await _attachmentService.Delete(entity.AttachmentId); // Sends the Attachment to the database to be deleted.
                    if (result is not null)
                    {
                        DeleteFile(result.AttachmentUrl); // Deletes the file from the directory.
                        int index = _attachmentList.FindIndex(c => c.AttachmentId == result.AttachmentId); // Finds the index of the deleted Attachment in the local list of Attachments, to remove it from the list.
                        if (index != -1) // Checks if the Attachment was found in the local list. If so, it removes the data at the indexed location.
                        {
                            _attachmentList.RemoveAt(index);
                            
                        }
                        //createType = false;
                        //editType = false;
                        ResetWork();
                        StateHasChanged();
                        NotificationUtility.SendSuccessNotification("Vedhæftningen blev slettet.");
                    }
                    else
                    {
                        NotificationUtility.SendErrorNotification("Der opstod en fejl på sletning af vedhæftningen.");
                        errorMessage = $"Der opstod en fejl på sletning af vedhæftningen {entity.AttachmentName}";
                    }
                }
            }
            catch (Exception ex)
            {
                
                NotificationUtility.SendErrorNotification("Der opstod en fejl på sletning af vedhæftningen.");
                errorMessage = $"Der opstod en fejl på sletning af vedhæftningen {entity.AttachmentName}, fejlbesked: {ex.Message}";
            }

        }
        else if (workingType == "result") // If the workingType is set to Result, it deletes the result.
        {
            var entity = result; // Sets the result property as the entity used in this method.
            try
            {
                var isConfirmed = await ConfirmDialog("Slet resultat", $"Er du sikker på at du vil slette resultatet? <br> ID: {entity.ResultId} <br> Tekst: {entity.ResultText}");
                if(isConfirmed == true)
                {
                    var result = await _resultService.Delete(entity.ResultId); // Sends the Result to the database to be deleted.
                    if (result is not null)
                    {
                        int index = _resultList.FindIndex(c => c.ResultId == result.ResultId); // Finds the index of the deleted Result in the local list of Results, to remove it from the list.
                        if (index != -1) // Checks if the Result was found in the local list. If so, it removes the data at the indexed location.
                        {
                            _resultList.RemoveAt(index);

                        }
                        //createType = false;
                        //editType = false;
                        ResetWork();
                        StateHasChanged();
                        NotificationUtility.SendSuccessNotification("Resultatet blev slettet.");
                    }
                    else
                    {
                        NotificationUtility.SendErrorNotification("Der opstod en fejl på sletning af resultatet.");
                        errorMessage = $"Der opstod en fejl på sletning af resultatet {entity.ResultText}";
                    }
                }
            }
            catch (Exception ex)
            {
                NotificationUtility.SendErrorNotification("Der opstod en fejl på sletning af resultatet.");
                errorMessage = $"Der opstod en fejl på sletning af resultatet {entity.ResultText}, fejlbesked: {ex.Message}";
            }
            
        }
        else if (workingType == "type") // If the workingType is set to Type, it deletes the type.
        {
            var entity = type; // Sets the type property as the entity used in this method.
            try
            {
                var isConfirmed = await ConfirmDialog("Slet type", $"Er du sikker på at du vil slette typen? <br> ID: {entity.TypeId} <br> Navn: {entity.CardTypeName}");
                if(isConfirmed == true)
                {
                    var result = await _typeService.Delete(entity.TypeId); // Sends the Type to the database to be deleted.
                    if (result is not null)
                    {
                        int index = _typeList.FindIndex(c => c.TypeId == result.TypeId); // Finds the index of the deleted Type in the local list of Types, to remove it from the list.
                        if (index != -1) // Checks if the Type was found in the local list. If so, it removes the data at the indexed location.
                        {
                            _typeList.RemoveAt(index);

                        }
                        //createType = false;
                        //editType = false;
                        ResetWork();
                        StateHasChanged();
                        NotificationUtility.SendSuccessNotification("Typen blev slettet.");
                    }
                    else
                    {
                        NotificationUtility.SendErrorNotification("Der opstod en fejl på sletning af typen.");
                        errorMessage = $"Der opstod en fejl på sletning af typen {entity.CardTypeName}";
                    }
                }
            }
            catch (Exception ex)
            {
                NotificationUtility.SendErrorNotification("Der opstod en fejl på sletning af typen.");
                errorMessage = $"Der opstod en fejl på sletning af typen {entity.CardTypeName}, fejlbesked: {ex.Message}";
            }
            
        }
        else if (workingType == "typeCategoryList") // If the workingType is set to TypeCategoryList, it deletes the typeCategoryList.
        {
            var entity = typeCategoryList; // Sets the typeCategoryList property as the entity used in this method.
            try
            {
                var isConfirmed = await ConfirmDialog("Slet type kategori", $"Er du sikker på at du vil slette type kategorien? <br> ID: {entity.TypeCategoryListId} <br> Navn: {entity.TypeCategoryListName}");
                if(isConfirmed == true)
                {
                    var result = await _typeCategoryListService.Delete(entity.TypeCategoryListId); // Sends the TypeCategoryList to the database to be deleted.
                    if (result is not null)
                    {
                        int index = _typeCategoryListList.FindIndex(c => c.TypeCategoryListId == result.TypeCategoryListId); // Finds the index of the deleted TypeCategoryList in the local list of TypeCategoryLists, to remove it from the list.
                        if (index != -1) // Checks if the TypeCategoryList was found in the local list. If so, it removes the data at the indexed location.
                        {
                            _typeCategoryListList.RemoveAt(index);

                        }
                        //createType = false;
                        //editType = false;
                        ResetWork();
                        StateHasChanged();
                        NotificationUtility.SendSuccessNotification("Type kategorien blev slettet.");
                    }
                    else
                    {
                        NotificationUtility.SendErrorNotification("Der opstod en fejl på sletning af type kategorien.");
                        errorMessage = $"Der opstod en fejl på sletning af type kategorien {entity.TypeCategoryListName}";
                    }
                }
            }
            catch (Exception ex)
            {
                NotificationUtility.SendErrorNotification("Der opstod en fejl på sletning af type kategorien.");
                errorMessage = $"Der opstod en fejl på sletning af type kategorien {entity.TypeCategoryListName}, fejlbesked: {ex.Message}";
            }
            
        }
    }
    #region CheckModels

    private async Task<bool> CheckAttachment(AttachmentDto entity){

        List<string> inactiveRelations = new();
        if (entity.Results == null)
        {
            entity.Results = new List<ResultDto>();
        }
        if(entity.Cards == null)
        {
            entity.Cards = new List<CardDto>();
        }
        inactiveRelations.AddRange(_activeCheckService.CheckActive(entity.Results, !entity.Active));
        inactiveRelations.AddRange(_activeCheckService.CheckActive(entity.Cards, !entity.Active));
        if (inactiveRelations.Count > 0)
        {
            var IsConfirmed = await ConfirmDialog($"{(entity.Active == true ? activityCheckFoundInactiveTitle : activityCheckFoundActiveTitle)} relationer", $"Vedhæftningen {(entity.Active == true ? activityCheckFoundInactiveMessage : activityCheckFoundActiveMessage)}: <br> {string.Join("<br>", inactiveRelations)}");
            if (IsConfirmed == true)
            {
                return true;
            }
            return false;
        }
        return true;
    }

    private async Task<bool> CheckCard(CardDto entity)
    {
        List<string> inactiveRelations = new();
        if (entity.Results == null)
        {
            entity.Results = new List<ResultDto>();
        }
        if(entity.Types == null)
        {
            entity.Types = new List<TypeDto>();
        }
        inactiveRelations.AddRange(_activeCheckService.CheckActive(entity.Results, !entity.Active));
        inactiveRelations.AddRange(_activeCheckService.CheckActive(entity.Types, !entity.Active));
        if(entity.Attachment is not null)
        {
            var inactiveString = _activeCheckService.CheckActive(entity.Attachment, !entity.Active);
            if (!string.IsNullOrEmpty(inactiveString))
            {
                inactiveRelations.Add(inactiveString);
            }
        }
        else
        {
            if (entity.AttachmentId is null)
            {
                return false;
            }
            AttachmentDto relatedAttachment = _attachmentList.FirstOrDefault(a => a.AttachmentId == entity.AttachmentId);
            if (relatedAttachment is not null)
            {
                var inactiveString = _activeCheckService.CheckActive(relatedAttachment, !entity.Active);
                if (!string.IsNullOrEmpty(inactiveString))
                {
                    inactiveRelations.Add(inactiveString);
                }
            }
            else
            {
                return false;
            }

        }
        if (inactiveRelations.Count > 0)
        {
            var IsConfirmed = await ConfirmDialog($"{(entity.Active == true ? activityCheckFoundInactiveTitle : activityCheckFoundActiveTitle)} relationer", $"Kortet {(entity.Active == true ? activityCheckFoundInactiveMessage : activityCheckFoundActiveMessage)}: <br> {string.Join("<br>", inactiveRelations)}");
            if (IsConfirmed == true)
            {
                return true;
            }
            return false;
        }
        return true;
    }

    private async Task<bool> CheckResult(ResultDto entity)
    {
        List<string> inactiveRelations = new();
        if (entity.Cards == null)
        {
            entity.Cards = new List<CardDto>();
        }
        inactiveRelations.AddRange(_activeCheckService.CheckActive(entity.Cards, !entity.Active));

        if (entity.Attachment is not null)
        {
            var inactiveString = _activeCheckService.CheckActive(entity.Attachment, !entity.Active);
            if (!string.IsNullOrEmpty(inactiveString))
            {
                inactiveRelations.Add(inactiveString);
            }
        }
        else if(entity.AttachmentId is not null)
        {
            AttachmentDto relatedAttachment = _attachmentList.FirstOrDefault(a => a.AttachmentId == entity.AttachmentId);
            if (relatedAttachment is not null)
            {
                var inactiveString = _activeCheckService.CheckActive(relatedAttachment, !entity.Active);
                if (!string.IsNullOrEmpty(inactiveString))
                {
                    inactiveRelations.Add(inactiveString);
                }
            }
            else
            {
                return false;
            }

        }
        if (inactiveRelations.Count > 0)
        {
            var IsConfirmed = await ConfirmDialog($"{(entity.Active == true ? activityCheckFoundInactiveTitle : activityCheckFoundActiveTitle)} relationer", $"Resultatet {(entity.Active == true ? activityCheckFoundInactiveMessage : activityCheckFoundActiveMessage)}: <br> {string.Join("<br>", inactiveRelations)}");
            if(IsConfirmed == true)
            {
                return true;
            }
            return false;
        }
        return true;

    }

    private async Task<bool> CheckType(TypeDto entity)
    {
        List<string> inactiveRelations = new();
        if (entity.Cards == null)
        {
            entity.Cards = new List<CardDto>();
        }
        if (entity.TypeCategoryLists == null)
        {
            entity.TypeCategoryLists = new List<TypeCategoryListDto>();
        }
        inactiveRelations.AddRange(_activeCheckService.CheckActive(entity.Cards, !entity.Active));
        inactiveRelations.AddRange(_activeCheckService.CheckActive(entity.TypeCategoryLists, !entity.Active));
        if (inactiveRelations.Count > 0)
        {
            var IsConfirmed = await ConfirmDialog($"{(entity.Active == true ? activityCheckFoundInactiveTitle : activityCheckFoundActiveTitle)} relationer", $"Typen {(entity.Active == true ? activityCheckFoundInactiveMessage : activityCheckFoundActiveMessage)}: <br> {string.Join("<br>", inactiveRelations)}");
            if (IsConfirmed == true)
            {
                return true;
            }
            return false;
        }
        return true;
    }

    private async Task<bool> CheckTypeCategoryList(TypeCategoryListDto entity)
    {
        List<string> inactiveRelations = new();
        if (entity.Types == null)
        {
            entity.Types = new List<TypeDto>();
        }
        inactiveRelations.AddRange(_activeCheckService.CheckActive(entity.Types, !entity.Active));
        if (inactiveRelations.Count > 0)
        {
            var IsConfirmed = await ConfirmDialog($"{(entity.Active == true ? activityCheckFoundInactiveTitle : activityCheckFoundActiveTitle)} relationer", $"Type kategorien {(entity.Active == true ? activityCheckFoundInactiveMessage : activityCheckFoundActiveMessage)}: <br> {string.Join("<br>", inactiveRelations)}");
            if (IsConfirmed == true)
            {
                return true;
            }
            return false;
        }
        return true;

    }
    #endregion
    private async Task<bool?> ConfirmDialog(string title, string message)
    {
        return await _dialogService.Confirm(message, title, new ConfirmOptions() {OkButtonText = "Fortsæt", CancelButtonText = "Afbryd"});
    }

    






}
