@page "/admin/data"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using SRLearningServer.Components.Interfaces.FrontendServices
@using SRLearningServer.Components.Models.DTO

@attribute [Authorize(Roles = "Admin")]

@inject IFrontendAttachmentService _attachmentService
@inject IFrontendCardService _cardService
@inject IFrontendResultService _resultService
@inject IFrontendTypeService _typeService
@inject IFrontendTypeCategoryListService _typeCategoryListService
@inject NotificationService NotificationService

<PageTitle>Data administration</PageTitle>
<RadzenCard>
<h3>Data Administration</h3>
    <RadzenButton Click="SetCreateType" Text="Opret Ny" />
    <RadzenButton Click="SetEditType" Text="Opdater Eksisterende" />

</RadzenCard>

<div>
    @if (createType == true || editType == true)
    {
        <RadzenCard>
            <RadzenLabel Component="EntitySelectionDropDown" Text="Vælg en data type du vil :" />
            <RadzenDropDown Name="EntitySelectionDropDown" TValue="string" @bind-Value=@workingType TextProperty="Text" ValueProperty="Value" Change="@SoftResetWork"
            Data="@(new [] {
                            new { Text = "Vælg data", Value=""},
                            new { Text = "Kort", Value = "card"},
                            new { Text = "Vedhæft", Value = "attachment"},
                            new { Text = "Resultat", Value = "result"},
                            new { Text = "Type", Value = "type"},
                            new { Text = "Type Kategori", Value = "typeCategoryList"}
                        })">
                
            </RadzenDropDown>
        </RadzenCard>
        
    }
    @if (createType == true)
    {
        if (workingType == "card")
        {
            <RadzenCard>
                <RadzenStack  class="rz-p-0 rz-p-md-12">
                    <h3>Opret Kort</h3>
                    <RadzenTemplateForm TItem="CardDto" Data=@card Submit="CreateCard">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="CardName" @bind-Value="card.CardName" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Navn er påkrævet" Component="CardName" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                <RadzenColumn>
                                    <RadzenFormField Text="Beskrivelse" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Name="CardText" @bind-Value="card.CardText" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Beskrivelse er påkrævet" Component="CardText" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                <RadzenColumn>
                                    <RadzenFormField Text="Vedhæftning" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                        <RadzenDropDownDataGrid Style="height:auto" Context="AttachmentContext" Name="AttachmentDropDown" @bind-Value="card.AttachmentId" Data="@attachmentList" ValueProperty="@nameof(AttachmentDto.AttachmentId)" TextProperty="@nameof(AttachmentDto.AttachmentName)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true">
                                            <Template>
                                                @if (AttachmentContext.Active == true)
                                                {
                                                    <span>Navn: @AttachmentContext.AttachmentName - Aktiv</span>
                                                }
                                                else
                                                {
                                                    <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv</span>
                                                }
                                                <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />
                                            </Template>
                                            <ValueTemplate>
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    @if (AttachmentContext.Active == true)
                                                    {
                                                        <span>Navn: @AttachmentContext.AttachmentName - Aktiv</span>
                                                    }
                                                    else
                                                    {
                                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv</span>
                                                    }
                                                    <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />

                                                </RadzenStack>
                                            </ValueTemplate>
                                        </RadzenDropDownDataGrid>
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Vedhæftning er påkrævet" Component="AttachmentDropDown" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                        <RadzenRadioButtonList Name="Active" @bind-Value="card.Active" TValue="bool">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                            </Items>
                                        </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="ResultContext" @bind-Target="@card.Results" @bind-Source="@resultList" TextProperty="@nameof(Models.DTO.ResultDto.ResultText)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte resultater
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte resultater
                             </TargetHeader>
                             <Template>
                                 @if (ResultContext.Active == true)
                                    {
                                        <span>resultat: @ResultContext.ResultText - Aktiv</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @ResultContext.ResultText - Inaktiv</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeContext" @bind-Target="@card.Types" @bind-Source="@typeList" TextProperty="@nameof(Models.DTO.TypeDto.CardTypeName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte typer
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte typer
                             </TargetHeader>
                             <Template>
                                 @if (TypeContext.Active == true)
                                    {
                                        <span>Type: @TypeContext.CardTypeName - Aktiv</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @TypeContext.CardTypeName - Inaktiv</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>

                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>



        }
        else if (workingType == "attachment")
        {

            <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <h3>Opret Vedhæftning</h3>
                    <RadzenTemplateForm TItem="AttachmentDto" Data=@attachment Submit="CreateAttachment">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="AttachmentName" @bind-Value="attachment.AttachmentName" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Navn er påkrævet" Component="AttachmentName" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenStack>
                                                <RadzenCard>
                                                    <label for="AttachmentSelect">Fil:</label>
                                                    <InputFile Required name="AttachmentSelect" OnChange="HandleFileSelected" />
                                                </RadzenCard>
                                            </RadzenStack>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                            <RadzenRadioButtonList Name="Active" @bind-Value="attachment.Active" TValue="bool">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                    <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="ResultContext" @bind-Target="@attachment.Results" @bind-Source="@resultList" TextProperty="@nameof(Models.DTO.ResultDto.ResultText)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte resultater
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte resultater
                             </TargetHeader>
                             <Template>
                                 @if (ResultContext.Active == true)
                                    {
                                        <span>resultat: @ResultContext.ResultText - Aktiv</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @ResultContext.ResultText - Inaktiv</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@attachment.Cards" @bind-Source="@cardList" TextProperty="@nameof(Models.DTO.CardDto.CardName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte Kort
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte Kort
                             </TargetHeader>
                             <Template>
                                 @if (CardContext.Active == true)
                                    {
                                        <span>Type: @CardContext.CardName - Aktiv</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @CardContext.CardName - Inaktiv</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>

                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
        }
        else if (workingType == "result")
        {
            <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <h3>Opret Resultat</h3>
                    <RadzenTemplateForm TItem="ResultDto" Data=@result Submit="CreateResult">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Tekst" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="ResultText" @bind-Value="result.ResultText" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Tekst er påkrævet" Component="ResultText" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                

                                <RadzenColumn>
                                    <RadzenFormField Text="Vedhæftning" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenDropDownDataGrid Style="height:auto" Context="AttachmentContext" Name="AttachmentDropDown" @bind-Value="result.AttachmentId" Data="@attachmentList" ValueProperty="@nameof(AttachmentDto.AttachmentId)" TextProperty="@nameof(AttachmentDto.AttachmentName)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" AllowClear="true">
                                                <Template>
                                                    @if (AttachmentContext.Active == true)
                                                    {
                                                        <span>Navn: @AttachmentContext.AttachmentName - Aktiv</span>
                                                    }
                                                    else
                                                    {
                                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv</span>
                                                    }

                                                    <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />
                                                </Template>
                                                <ValueTemplate>
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        @if (AttachmentContext.Active == true)
                                                        {
                                                            <span>Navn: @AttachmentContext.AttachmentName - Aktiv</span>
                                                        }
                                                        else
                                                        {
                                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv</span>
                                                        }
                                                        <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />

                                                    </RadzenStack>
                                                </ValueTemplate>
                                            </RadzenDropDownDataGrid>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                            <RadzenRadioButtonList Name="Active" @bind-Value="result.Active" TValue="bool">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                    <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@result.Cards" @bind-Source="@cardList" TextProperty="@nameof(CardDto.CardName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte Kort
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte Kort
                             </TargetHeader>
                             <Template>
                                 @if (CardContext.Active == true)
                                    {
                                        <span>resultat: @CardContext.CardName - Aktiv</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @CardContext.CardName - Inaktiv</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>

                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
            
        }
        else if (workingType == "type")
        {
            <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <h3>Opret Type</h3>
                    <RadzenTemplateForm TItem="TypeDto" Data=@type Submit="CreateType">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="CardTypeName" @bind-Value="type.CardTypeName" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Navn er påkrævet" Component="CardTypeName" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                            <RadzenRadioButtonList Name="Active" @bind-Value="type.Active" TValue="bool">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                    <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@type.Cards" @bind-Source="@cardList" TextProperty="@nameof(CardDto.CardName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte Kort
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte Kort
                             </TargetHeader>
                             <Template>
                                 @if (CardContext.Active == true)
                                    {
                                        <span>Kort: @CardContext.CardName - Aktiv</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Kort: @CardContext.CardName - Inaktiv</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeCategoryContext" @bind-Target="@type.TypeCategoryLists" @bind-Source="@typeCategoryListList" TextProperty="@nameof(TypeCategoryListDto.TypeCategoryListName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte type kategorier
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte type kategorier
                             </TargetHeader>
                             <Template>
                                 @if (TypeCategoryContext.Active == true)
                                    {
                                        <span>Type kategori: @TypeCategoryContext.TypeCategoryListName - Aktiv</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type kategori: @TypeCategoryContext.TypeCategoryListName - Inaktiv</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>

                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
        }
        else if (workingType == "typeCategoryList")
        {
            <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <h3>Opret Type Kategori</h3>
                    <RadzenTemplateForm TItem="TypeCategoryListDto" Data=@typeCategoryList Submit="CreateTypeCategoryList">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="TypeCategoryName" @bind-Value="typeCategoryList.TypeCategoryListName" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Navn er påkrævet" Component="TypeCategoryName" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>

                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                            <RadzenRadioButtonList Name="Active" @bind-Value="typeCategoryList.Active" TValue="bool">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                    <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeContext" @bind-Target="@typeCategoryList.Types" @bind-Source="@typeList" TextProperty="@nameof(TypeDto.CardTypeName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte typer
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte typer
                             </TargetHeader>
                             <Template>
                                 @if (TypeContext.Active == true)
                                    {
                                        <span>Type: @TypeContext.CardTypeName - Aktiv</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @TypeContext.CardTypeName - Inaktiv</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>

                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
            
        }

    }
    else if (editType == true)
    {
        if (workingType == "card")
        {
            <RadzenCard >
                <RadzenLabel Text="Vælg Kort" Component="EntitySelectionDropDown" />
                <RadzenDropDownDataGrid Style="width:auto" Name="EntitySelectionDropDown" TValue="int" Data="@_cardList" ValueProperty="@nameof(CardDto.CardId)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                Change="@SelectCard">
                    <Template>
                        @if (context.Active == true)
                        {
                            <span>Navn: @context.CardName - Aktiv</span>
                        }
                        else
                        {
                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @context.CardName - Inaktiv</span>
                        }

                    </Template>
                </RadzenDropDownDataGrid>
            </RadzenCard>
            
            if (card.CardId > 0)
            {
                <RadzenCard>
                    <RadzenStack class="rz-p-0 rz-p-md-12">
                        <h3>Opdater Kort</h3>
                        <RadzenTemplateForm TItem="CardDto" Data=@card Submit="UpdateCard">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="12">
                                    <RadzenColumn Size="12">
                                        <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenTextBox Style="width: 100%" Name="CardName" @bind-Value="card.CardName" />
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Navn er påkrævet" Component="CardName" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>

                                    <RadzenColumn>
                                        <RadzenFormField Text="Beskrivelse" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenTextBox Name="CardText" @bind-Value="card.CardText" />
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Beskrivelse er påkrævet" Component="CardText" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>

                                    <RadzenColumn>
                                        <RadzenFormField Text="Vedhæftning" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenDropDownDataGrid Style="height:auto" Context="AttachmentContext" Name="AttachmentDropDown" @bind-Value="card.AttachmentId" Data="@attachmentList" ValueProperty="@nameof(AttachmentDto.AttachmentId)" TextProperty="@nameof(AttachmentDto.AttachmentName)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true">
                                                    <Template>
                                                        @if (AttachmentContext.Active == true)
                                                        {
                                                            <span>Navn: @AttachmentContext.AttachmentName - Aktiv</span>
                                                        }
                                                        else
                                                        {
                                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv</span>
                                                        }
                                                        <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />

                                                    </Template>
                                                    <ValueTemplate>
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    @if (AttachmentContext.Active == true)
                                                    {
                                                        <span>Navn: @AttachmentContext.AttachmentName - Aktiv</span>
                                                    }
                                                    else
                                                    {
                                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv</span>
                                                    }
                                                    <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />

                                                </RadzenStack>
                                            </ValueTemplate>
                                                </RadzenDropDownDataGrid>
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Vedhæftning er påkrævet" Component="AttachmentDropDown" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                    <RadzenColumn>
                                        <RadzenFormField Variant="@variant">
                                            <ChildContent>
                                                <RadzenRadioButtonList Name="Active" @bind-Value="card.Active" TValue="bool">
                                                    <Items>
                                                        <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                        <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                    </Items>
                                                </RadzenRadioButtonList>
                                            </ChildContent>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="ResultContext" @bind-Target="@card.Results" @bind-Source="@resultList" TextProperty="@nameof(Models.DTO.ResultDto.ResultText)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte resultater
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte resultater
                                 </TargetHeader>
                                 <Template>
                                     @if (ResultContext.Active == true)
                                        {
                                            <span>resultat: @ResultContext.ResultText - Aktiv</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @ResultContext.ResultText - Inaktiv</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>

                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeContext" @bind-Target="@card.Types" @bind-Source="@typeList" TextProperty="@nameof(Models.DTO.TypeDto.CardTypeName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte typer
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte typer
                                 </TargetHeader>
                                 <Template>
                                     @if (TypeContext.Active == true)
                                        {
                                            <span>Type: @TypeContext.CardTypeName - Aktiv</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @TypeContext.CardTypeName - Inaktiv</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>
                            <RadzenCard>
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Button" Text="Deaktiver" Click="Deactivate"></RadzenButton>
                                <RadzenButton Style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)' ButtonType="ButtonType.Button" Text="Slet" Click="Delete"></RadzenButton>
                            </RadzenCard>

                        </RadzenTemplateForm>
                    </RadzenStack>
                </RadzenCard>
            }
        }
        else if (workingType == "attachment")
        {
            <RadzenCard>
                <RadzenLabel Text="Vælg Vedhæft" Component="EntitySelectionDropDown" />
                <RadzenDropDownDataGrid Name="EntitySelectionDropDown" TValue="int" Data="@_attachmentList" ValueProperty="@nameof(AttachmentDto.AttachmentId)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                        Change="@SelectAttachment">
                    <Template>
                        @if (context.Active == true)
                        {
                            <span>Navn: @context.AttachmentName - Aktiv</span>
                        }
                        else
                        {
                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @context.AttachmentName- Inaktiv</span>
                        }
                        <RadzenImage Path="@($"{attachmentReadDirectory}{context.AttachmentUrl}")" Style="width: 4rem;" />

                    </Template>
                </RadzenDropDownDataGrid>
            </RadzenCard>
            @if(attachment.AttachmentId > 0)
            {
                <RadzenCard>
                    <RadzenStack class="rz-p-0 rz-p-md-12">
                        <h3>Opret Vedhæftning</h3>
                        <RadzenTemplateForm TItem="AttachmentDto" Data=@attachment Submit="UpdateAttachment">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="12">
                                    <RadzenColumn Size="12">
                                        <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenTextBox Style="width: 100%" Name="AttachmentName" @bind-Value="attachment.AttachmentName" />
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Navn er påkrævet" Component="AttachmentName" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>

                                    <RadzenColumn>
                                        <RadzenFormField Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenStack>
                                                    <RadzenCard>
                                                        <label for="AttachmentSelect">Fil:</label>
                                                        <InputFile name="AttachmentSelect" OnChange="HandleFileSelected" />
                                                        <RadzenImage Path="@($"{attachmentReadDirectory}{attachment.AttachmentUrl}")" />
                                                    </RadzenCard>
                                                </RadzenStack>
                                            </ChildContent>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                    <RadzenColumn>
                                        <RadzenFormField Variant="@variant">
                                            <ChildContent>
                                                <RadzenRadioButtonList Name="Active" @bind-Value="attachment.Active" TValue="bool">
                                                    <Items>
                                                        <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                        <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                    </Items>
                                                </RadzenRadioButtonList>
                                            </ChildContent>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="ResultContext" @bind-Target="@attachment.Results" @bind-Source="@resultList" TextProperty="@nameof(Models.DTO.ResultDto.ResultText)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte resultater
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte resultater
                                 </TargetHeader>
                                 <Template>
                                     @if (ResultContext.Active == true)
                                        {
                                            <span>resultat: @ResultContext.ResultText - Aktiv</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @ResultContext.ResultText - Inaktiv</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>

                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@attachment.Cards" @bind-Source="@cardList" TextProperty="@nameof(Models.DTO.CardDto.CardName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte Kort
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte Kort
                                 </TargetHeader>
                                 <Template>
                                     @if (CardContext.Active == true)
                                        {
                                            <span>Type: @CardContext.CardName - Aktiv</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @CardContext.CardName - Inaktiv</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>
                            <RadzenCard>
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Button" Text="Deaktiver" Click="Deactivate"></RadzenButton>
                                <RadzenButton Style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)' ButtonType="ButtonType.Button" Text="Slet" Click="Delete"></RadzenButton>
                            </RadzenCard>

                        </RadzenTemplateForm>
                    </RadzenStack>
                </RadzenCard>
            }
        }
        else if (workingType == "result")
        {
            <RadzenCard>
                <RadzenLabel Text="Vælg Resultat" Component="EntitySelectionDropDown" />
                <RadzenDropDownDataGrid Name="EntitySelectionDropDown" TValue="int" Data="@_resultList" ValueProperty="@nameof(ResultDto.ResultId)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                        Change="@SelectResult">
                    <Template>
                        @if (context.Active == true)
                        {
                            <span>Tekts: @context.ResultText - Aktiv</span>
                        }
                        else
                        {
                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Tekst: @context.ResultText - Inaktiv</span>
                        }

                    </Template>
                </RadzenDropDownDataGrid>
            </RadzenCard>
            @if(result.ResultId > 0)
            {

            <RadzenCard>
                <RadzenStack class="rz-p-0 rz-p-md-12">
                    <h3>Opdater Resultat</h3>
                    <RadzenTemplateForm TItem="ResultDto" Data=@result Submit="UpdateResult">
                        <RadzenRow>
                            <RadzenColumn Size="12" SizeMD="12">
                                <RadzenColumn Size="12">
                                        <RadzenFormField Text="Tekst" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                            <RadzenTextBox Style="width: 100%" Name="ResultText" @bind-Value="result.ResultText" />
                                        </ChildContent>
                                        <Helper>
                                            <RadzenRequiredValidator Text="Tekst er påkrævet" Component="ResultText" />
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>



                                <RadzenColumn>
                                        <RadzenFormField Text="Vedhæftning" Variant="@variant" Style="width: 100%">
                                        <ChildContent>
                                                <RadzenDropDownDataGrid Style="height:auto" Context="AttachmentContext" Name="AttachmentDropDown" @bind-Value="result.AttachmentId" Data="@attachmentList" ValueProperty="@nameof(AttachmentDto.AttachmentId)" TextProperty="@nameof(AttachmentDto.AttachmentName)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" AllowClear="true">
                                                <Template>
                                                    @if (AttachmentContext.Active == true)
                                                    {
                                                        <span>Navn: @AttachmentContext.AttachmentName - Aktiv</span>
                                                    }
                                                    else
                                                    {
                                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv</span>
                                                    }
                                                        <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />
                                                </Template>
                                                    <ValueTemplate>
                                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                            @if (AttachmentContext.Active == true)
                                                            {
                                                                <span>Navn: @AttachmentContext.AttachmentName - Aktiv</span>
                                                            }
                                                            else
                                                            {
                                                                <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @AttachmentContext.AttachmentName - Inaktiv</span>
                                                            }
                                                            <RadzenImage Path="@($"{attachmentReadDirectory}{AttachmentContext.AttachmentUrl}")" Style="width: 5rem;" />

                                                        </RadzenStack>
                                                    </ValueTemplate>
                                            </RadzenDropDownDataGrid>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenFormField Variant="@variant">
                                        <ChildContent>
                                            <RadzenRadioButtonList Name="Active" @bind-Value="result.Active" TValue="bool">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                    <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        </ChildContent>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow>
                            <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@result.Cards" @bind-Source="@cardList" TextProperty="@nameof(CardDto.CardName)" AllowFiltering>
                             <SourceHeader>
                                 Fravalgte Kort
                             </SourceHeader>
                             <TargetHeader>
                                 Valgte Kort
                             </TargetHeader>
                             <Template>
                                 @if (CardContext.Active == true)
                                    {
                                        <span>resultat: @CardContext.CardName - Aktiv</span>
                                    }
                                    else
                                    {
                                        <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>resultat: @CardContext.CardName - Inaktiv</span>
                                    }

                                </Template>
                            </RadzenPickList>
                        </RadzenRow>

                        <RadzenCard>
                                <RadzenCard>
                                    <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>
                                    <RadzenButton ButtonType="ButtonType.Button" Text="Deaktiver" Click="Deactivate"></RadzenButton>
                                    <RadzenButton Style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)' ButtonType="ButtonType.Button" Text="Slet" Click="Delete"></RadzenButton>
                                </RadzenCard>
                        </RadzenCard>
                    </RadzenTemplateForm>
                </RadzenStack>
            </RadzenCard>
            }
        }
        else if (workingType == "type")
        {
            <RadzenCard>
                <RadzenLabel Text="Vælg Type" Component="EntitySelectionDropDown" />
                <RadzenDropDownDataGrid Name="EntitySelectionDropDown" TValue="int" Data="@_typeList" ValueProperty="@nameof(TypeDto.TypeId)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                        Change="@SelectType">
                    <Template>
                        @if (context.Active == true)
                        {
                            <span>Navn: @context.CardTypeName - Aktiv</span>
                        }
                        else
                        {
                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @context.CardTypeName - Inaktiv</span>
                        }

                    </Template>
                </RadzenDropDownDataGrid>
            </RadzenCard>
            @if (type.TypeId > 0)
            {
                <RadzenCard>
                    <RadzenStack class="rz-p-0 rz-p-md-12">
                        <h3>Opdater Type</h3>
                        <RadzenTemplateForm TItem="TypeDto" Data=@type Submit="UpdateType">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="12">
                                    <RadzenColumn Size="12">
                                        <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenTextBox Style="width: 100%" Name="CardTypeName" @bind-Value="type.CardTypeName" />
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Navn er påkrævet" Component="CardTypeName" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>

                                    <RadzenColumn>
                                        <RadzenFormField Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenRadioButtonList Name="Active" @bind-Value="type.Active" TValue="bool">
                                                    <Items>
                                                        <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                        <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                    </Items>
                                                </RadzenRadioButtonList>
                                            </ChildContent>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="CardContext" @bind-Target="@type.Cards" @bind-Source="@cardList" TextProperty="@nameof(CardDto.CardName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte Kort
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte Kort
                                 </TargetHeader>
                                 <Template>
                                     @if (CardContext.Active == true)
                                        {
                                            <span>Kort: @CardContext.CardName - Aktiv</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Kort: @CardContext.CardName - Inaktiv</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>

                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeCategoryContext" @bind-Target="@type.TypeCategoryLists" @bind-Source="@typeCategoryListList" TextProperty="@nameof(TypeCategoryListDto.TypeCategoryListName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte type kategorier
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte type kategorier
                                 </TargetHeader>
                                 <Template>
                                     @if (TypeCategoryContext.Active == true)
                                        {
                                            <span>Type kategori: @TypeCategoryContext.TypeCategoryListName - Aktiv</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type kategori: @TypeCategoryContext.TypeCategoryListName - Inaktiv</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>
                            <RadzenCard>
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Button" Text="Deaktiver" Click="Deactivate"></RadzenButton>
                                <RadzenButton Style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)' ButtonType="ButtonType.Button" Text="Slet" Click="Delete"></RadzenButton>
                            </RadzenCard>

                        </RadzenTemplateForm>
                    </RadzenStack>
                </RadzenCard>
            }
        }
        else if (workingType == "typeCategoryList")
        {
            <RadzenCard>
                <RadzenLabel Text="Vælg Type Kategori" Component="EntitySelectionDropDown" />
                <RadzenDropDownDataGrid Name="EntitySelectionDropDown" TValue="int" Data="@_typeCategoryListList" ValueProperty="@nameof(TypeCategoryListDto.TypeCategoryListId)" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                        Change="@SelectTypeCategory">
                    <Template>
                        @if (context.Active == true)
                        {
                            <span>Navn: @context.TypeCategoryListName - Aktiv</span>
                        }
                        else
                        {
                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Navn: @context.TypeCategoryListName - Inaktiv</span>
                        }

                    </Template>
                </RadzenDropDownDataGrid>
            </RadzenCard>
            @if (typeCategoryList.TypeCategoryListId > 0)
            {
                <RadzenCard>
                    <RadzenStack class="rz-p-0 rz-p-md-12">
                        <h3>Opdater Type Kategori</h3>
                        <RadzenTemplateForm TItem="TypeCategoryListDto" Data=@typeCategoryList Submit="UpdateTypeCategoryList">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="12">
                                    <RadzenColumn Size="12">
                                        <RadzenFormField Text="Navn" Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenTextBox Style="width: 100%" Name="TypeCategoryName" @bind-Value="typeCategoryList.TypeCategoryListName" />
                                            </ChildContent>
                                            <Helper>
                                                <RadzenRequiredValidator Text="Navn er påkrævet" Component="TypeCategoryName" />
                                            </Helper>
                                        </RadzenFormField>
                                    </RadzenColumn>

                                    <RadzenColumn>
                                        <RadzenFormField Variant="@variant" Style="width: 100%">
                                            <ChildContent>
                                                <RadzenRadioButtonList Name="Active" @bind-Value="typeCategoryList.Active" TValue="bool">
                                                    <Items>
                                                        <RadzenRadioButtonListItem Text="Aktiv" Value="@true" />
                                                        <RadzenRadioButtonListItem Text="Inaktiv" Value="@false" />
                                                    </Items>
                                                </RadzenRadioButtonList>
                                            </ChildContent>
                                        </RadzenFormField>
                                    </RadzenColumn>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenPickList Style="width: 100%; max-height:30vh;" Multiple Context="TypeContext" @bind-Target="@typeCategoryList.Types" @bind-Source="@typeList" TextProperty="@nameof(TypeDto.CardTypeName)" AllowFiltering>
                                 <SourceHeader>
                                     Fravalgte typer
                                 </SourceHeader>
                                 <TargetHeader>
                                     Valgte typer
                                 </TargetHeader>
                                 <Template>
                                     @if (TypeContext.Active == true)
                                        {
                                            <span>Type: @TypeContext.CardTypeName - Aktiv</span>
                                        }
                                        else
                                        {
                                            <span style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)'>Type: @TypeContext.CardTypeName - Inaktiv</span>
                                        }

                                    </Template>
                                </RadzenPickList>
                            </RadzenRow>
                            <RadzenCard>
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Gem"></RadzenButton>
                                <RadzenButton ButtonType="ButtonType.Button" Text="Deaktiver" Click="Deactivate"></RadzenButton>
                                <RadzenButton Style='background-color: var(--rz-danger); color: var(--rz-text-contrast-color)' ButtonType="ButtonType.Button" Text="Slet" Click="Delete"></RadzenButton>
                            </RadzenCard>

                        </RadzenTemplateForm>
                    </RadzenStack>
                </RadzenCard>
            }
        }
    }
    else
    {
        <p>Der er ikke valgt en handling</p>
        <p class="error">@errorMessage</p>

    }

</div>




@code {
    private string workingType = "";
    private bool createType = false;
    private bool editType = false;
    private string errorMessage = "";
    private CardDto card = new();
    private AttachmentDto attachment = new();
    private ResultDto result = new();
    private TypeDto type = new();
    private TypeCategoryListDto typeCategoryList = new();
    private int value;

    private List<CardDto> _cardList;
    private List<AttachmentDto> _attachmentList;
    private List<ResultDto> _resultList;
    private List<TypeDto> _typeList;
    private List<TypeCategoryListDto> _typeCategoryListList;


    private IEnumerable<CardDto> cardList;
    private IEnumerable<AttachmentDto> attachmentList;
    private IEnumerable<ResultDto> resultList;
    private IEnumerable<TypeDto> typeList;
    private IEnumerable<TypeCategoryListDto> typeCategoryListList;
    private string attachmentReadDirectory = "/Development/Attachments/";
    private string attachmentCreateDirectory = "wwwroot//Development/Attachments/";

    Variant variant = Variant.Filled;


    // int attachmentId = 0;
    // int[] selectedResultIds = [];
    // int[] selectedTypeIds = [];

    private IBrowserFile? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _attachmentList = await GetAttachments();
            _cardList = await GetCards();
            _resultList = await GetResults();
            _typeList = await GetTypes();
            _typeCategoryListList = await GetTypeCategoryLists();
        }
        catch (Exception ex)
        {

            errorMessage = ex.Message;
        }
        finally
        {

        }

    }

    private void ChangeTypeToBeCreated(string type)
    {
        workingType = type;
    }
    private void SetCreateType()
    {
        ResetWork();
        createType = true;
        editType = false;
    }
    private void SetEditType()
    {
        ResetWork();
        createType = false;
        editType = true;
    }

    private void ResetWork()
    {
        workingType = "";
        SoftResetWork();
    }

    private void SoftResetWork() 
    {
        card = new();
        attachment = new();
        result = new();
        type = new();
        typeCategoryList = new();
        cardList = new List<CardDto>(_cardList);
        attachmentList = new List<AttachmentDto>(_attachmentList);
        resultList = new List<ResultDto>(_resultList);
        typeList = new List<TypeDto>(_typeList);
        typeCategoryListList = new List<TypeCategoryListDto>(_typeCategoryListList);
        errorMessage = "";
    }

    private async Task<List<AttachmentDto>> GetAttachments()
    {
        var result = await _attachmentService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle vedhæftninger.";
            return new List<AttachmentDto>();
        }
        return result;
    }

    private async Task<List<ResultDto>> GetResults()
    {
        var result = await _resultService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle resultater.";
            return new List<ResultDto>();
        }
        return result;
    }

    private async Task<List<TypeDto>> GetTypes()
    {
        var result = await _typeService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle typer.";
            return new List<TypeDto>();
        }
        return result;
    }

    private async Task<List<TypeCategoryListDto>> GetTypeCategoryLists()
    {
        var result = await _typeCategoryListService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle type kategorier.";
            return new List<TypeCategoryListDto>();
        }
        return result;

    }

    private async Task<List<CardDto>> GetCards()
    {
        var result = await _cardService.GetAll();
        if (result is null)
        {
            errorMessage = "Der blev ikke fundet nogle kort.";
            return new List<CardDto>();
        }
        return result;
    }
    private async void CreateCard()
    {
        ShowSuccessNotification("Kortet blev oprettet.");
        var entity = card;
        var result = await _cardService.Create(entity);
        if (result is not null)
        {
            _cardList.ToList().Add(result);
            createType = false;
            ResetWork();
            StateHasChanged();
            ShowSuccessNotification("Kortet blev oprettet.");
        }
        else
        {
            ShowErrorNotification("Der opstod en fejl under oprettelsen af kortet.");
        }
    }

    private async void CreateAttachment()
    {
        if (selectedFile == null)
        {
            ShowErrorNotification("Vælg en fil at uploade.");
            errorMessage = "Please select a file to upload.";
            return;
        }
        CreateFile();

        var result = await _attachmentService.Create(attachment);
        if (result is not null)
        {
            _attachmentList.ToList().Add(result);
            createType = false;
            ResetWork();
            StateHasChanged();
            ShowSuccessNotification("Vedhæftningen blev oprettet.");
        }
        else
        {
            ShowErrorNotification("Der opstod en fejl under oprettelsen af vedhæftningen.");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            var format = "image/png"; // You can add more formats if needed
            if (selectedFile.ContentType.StartsWith(format))
            {
                var fileExtension = Path.GetExtension(selectedFile.Name);
                var randomFileName = $"{Guid.NewGuid()}{fileExtension}";


                attachment.AttachmentUrl = $"{randomFileName}";
            }
            else
            {
                selectedFile = null;
                errorMessage = "Please upload a valid png image file.";
            }
        }
    }

    private async void CreateResult()
    {
        var resultReceived = await _resultService.Create(result);
        if (resultReceived is not null)
        {
            _resultList.ToList().Add(resultReceived);
            createType = false;
            ResetWork();
            StateHasChanged();
            ShowSuccessNotification("Resultatet blev oprettet.");
        }
        else
        {
            ShowErrorNotification("Der opstod en fejl under oprettelsen af resultatet.");
        }
    }

    private async void CreateType()
    {
        var result = await _typeService.Create(type);
        if (result is not null)
        {
            _typeList.ToList().Add(result);
            createType = false;
            ResetWork();
            StateHasChanged();
            ShowSuccessNotification("Typen blev oprettet.");
        }
        else
        {
            ShowErrorNotification("Der opstod en fejl under oprettelsen af typen.");
        }
    }

    private async void CreateTypeCategoryList()
    {
        // if (selectedTypeIds.Length > 0)
        // {
        //     typeCategoryList.Types = typeList.Where(x => selectedTypeIds.Contains(x.TypeId)).ToList();
        // }
        var result = await _typeCategoryListService.Create(typeCategoryList);
        if (result is not null)
        {
            _typeCategoryListList.ToList().Add(result);
            createType = false;
            ResetWork();
            StateHasChanged();
            ShowSuccessNotification("Type kategorien blev oprettet.");
        }
        else
        {
            ShowErrorNotification("Der opstod en fejl under oprettelsen af type kategorien.");
        }
    }

    private async void SelectCard(object e) //int entityId
    {
        int entityId = (int)e;
        if (entityId > 0) //int.TryParse(e.Value.ToString(), out int entityId)
        {   
            if (entityId > 0)
            {
                var entity = await _cardService.GetByid(entityId);
                card = new()
                {
                    CardId = entity.CardId,
                    CardName = entity.CardName,
                    CardText = entity.CardText,
                    Active = entity.Active,
                    AttachmentId = entity.AttachmentId,
                    Attachment = entity.Attachment,
                    Results = entity.Results,
                    Types = entity.Types
                };
                resultList = FilterResults(card.Results);
                typeList = FilterTypes(card.Types);
                StateHasChanged();
            }
        }
    }
    private async void SelectType(object e)
    {
        int entityId = (int)e;
        if (true)
        {
            if (entityId > 0)
            {
                var entity = await _typeService.GetById(entityId);
                type = new()
                {
                    TypeId = entity.TypeId,
                    CardTypeName = entity.CardTypeName,
                    Active = entity.Active,
                    Cards = entity.Cards,
                    TypeCategoryLists = entity.TypeCategoryLists
                };
                cardList = FilterCards(type.Cards);
                typeCategoryListList = FilterTypeCategories(type.TypeCategoryLists);
                StateHasChanged();
            }
        }
    }

    private async void SelectResult(object e)
    {
        int entityId = (int)e;
        if (true)
        {
            if (entityId > 0)
            {
                var entity = await _resultService.GetById(entityId);
                result = new()
                {
                    ResultId = entity.ResultId,
                    ResultText = entity.ResultText,
                    Active = entity.Active,
                    AttachmentId = entity.AttachmentId,
                    Attachment = entity.Attachment,
                    Cards = entity.Cards
                };
                cardList = FilterCards(result.Cards);
                StateHasChanged();
            }
        }
    }

    private async void SelectAttachment(object e)
    {
        int entityId = (int)e;
        if (true)
        {
            if (entityId > 0)
            {
                var entity = await _attachmentService.GetById(entityId);
                attachment = new()
                {
                    AttachmentId = entity.AttachmentId,
                    AttachmentName = entity.AttachmentName,
                    AttachmentUrl = entity.AttachmentUrl,
                    Active = entity.Active,
                    Results = entity.Results,
                    Cards = entity.Cards
                };
                resultList = FilterResults(attachment.Results);
                cardList = FilterCards(attachment.Cards);
                StateHasChanged();
            }
        }
    }

    private async void SelectTypeCategory(object e)
    {
        int entityId = (int)e;
        if (true)
        {
            if (entityId > 0)
            {
                var entity = await _typeCategoryListService.GetById(entityId);
                typeCategoryList = new()
                {
                    TypeCategoryListId = entity.TypeCategoryListId,
                    TypeCategoryListName = entity.TypeCategoryListName,
                    Active = entity.Active,
                    Types = entity.Types
                };
                typeList = FilterTypes(typeCategoryList.Types);
                StateHasChanged();
            }
        }
    }

    private IEnumerable<ResultDto> FilterResults(IEnumerable<ResultDto> results)
    {
        return _resultList.Where(result => !results.Any(r => r.ResultId == result.ResultId)).ToList();
    }

    private IEnumerable<TypeDto> FilterTypes(IEnumerable<TypeDto> types)
    {
        return _typeList.Where(type => !types.Any(t => t.TypeId == type.TypeId)).ToList();
    }

    private IEnumerable<CardDto> FilterCards(IEnumerable<CardDto> cards)
    {
        return _cardList.Where(card => !cards.Any(c => c.CardId == card.CardId)).ToList();
    }
    private IEnumerable<TypeCategoryListDto> FilterTypeCategories(IEnumerable<TypeCategoryListDto> tcls)
    {
        return _typeCategoryListList.Where(tcl => !tcls.Any(t => t.TypeCategoryListId == tcl.TypeCategoryListId)).ToList();
    }

    private async void UpdateCard()
    {
        var entity = card;
        if(entity.CardId > 0){
            var result = await _cardService.Update(entity);
            if (result is not null)
            {
                int index = _cardList.FindIndex(x => x.CardId == result.CardId);
                if (index != -1)
                {
                    _cardList[index] = result;
                    createType = false;
                    ResetWork();
                    StateHasChanged();
                    ShowSuccessNotification("Kortet blev opdateret.");
                }
                else{
                    ShowErrorNotification("Der skete en fejl ved opdatering af kortet.");
                    errorMessage = "Der skete en fejl ved opdatering af kortet.";
                }
            }
            else{
                ShowErrorNotification("Der skete en fejl ved opdatering af kortet.");
                errorMessage = "Der skete en fejl ved opdatering af kortet.";
            }
        }
    }

    private async void UpdateType(){
        var entity = type;
        if(entity.TypeId > 0)
        {
            var result = await _typeService.Update(entity);
            if (result is not null)
            {
                int index = _typeList.FindIndex(x => x.TypeId == result.TypeId);
                if (index != -1)
                {
                    _typeList[index] = result;
                    createType = false;
                    ResetWork();
                    StateHasChanged();
                    ShowSuccessNotification("Typen blev opdateret.");
                }
                else{
                    ShowErrorNotification("Der skete en fejl ved opdatering af typen.");
                    errorMessage = "Der skete en fejl ved opdatering af typen.";
                }
            }
            else{
                ShowErrorNotification("Der skete en fejl ved opdatering af typen.");
                errorMessage = "Der skete en fejl ved opdatering af typen.";
            }

        }
    }

    private async void UpdateTypeCategoryList(){
        var entity = typeCategoryList;
        if(entity.TypeCategoryListId > 0)
        {
            var result = await _typeCategoryListService.Update(entity);
            if (result is not null)
            {
                int index = _typeCategoryListList.FindIndex(x => x.TypeCategoryListId == result.TypeCategoryListId);
                if (index != -1)
                {
                    _typeCategoryListList[index] = result;
                    createType = false;
                    ResetWork();
                    StateHasChanged();
                    ShowSuccessNotification("Type kategorien blev opdateret.");
                }
                else{
                    ShowErrorNotification("Der skete en fejl ved opdatering af type kategorien.");
                    errorMessage = "Der skete en fejl ved opdatering af typen.";
                }
            }
            else{
                ShowErrorNotification("Der skete en fejl ved opdatering af type kategorien.");
                errorMessage = "Der skete en fejl ved opdatering af typen.";
            }

        }
    }

    private async void UpdateResult()
    {
        var entity = result;
        if(entity.ResultId > 0)
        {
            var resultReceived = await _resultService.Update(entity);
            if (resultReceived is not null)
            {
                int index = _resultList.FindIndex(x => x.ResultId == resultReceived.ResultId);
                if (index != -1)
                {
                    _resultList[index] = resultReceived;
                    createType = false;
                    ResetWork();
                    StateHasChanged();
                    ShowSuccessNotification("Resultatet blev opdateret.");
                }
                else{
                    ShowErrorNotification("Der skete en fejl ved opdatering af resultatet.");
                    errorMessage = "Der skete en fejl ved opdatering af resultatet.";
                }
            }
            else{
                ShowErrorNotification("Der skete en fejl ved opdatering af resultatet.");
                errorMessage = "Der skete en fejl ved opdatering af resultatet.";
            }
        }
    }

    private async void UpdateAttachment()
    {
        //var entity = attachment;
        if (attachment.AttachmentId > 0)
        {
            if (!Path.Exists($"{attachmentCreateDirectory}{attachment.AttachmentUrl}"))
            {
                if (selectedFile == null)
                {
                    ShowErrorNotification("Der er ikke valgt en gyldig fil.");
                    return;
                }
                CreateFile();                
            }

            var result = await _attachmentService.Update(attachment);
            if (result is not null)
            {
                int index = _attachmentList.FindIndex(x => x.AttachmentId == result.AttachmentId);
                if (index != -1)
                {
                    _attachmentList[index] = result;
                    createType = false;
                    ResetWork();
                    StateHasChanged();
                    ShowSuccessNotification("Vedhæftningen blev opdateret.");
                }
                else{
                    ShowErrorNotification("Der skete en fejl ved opdatering af vedhæftningen.");
                    errorMessage = "Der skete en fejl ved opdatering af vedhæftningen.";
                }
            }
            else{
                ShowErrorNotification("Der skete en fejl ved opdatering af vedhæftningen.");
                errorMessage = "Der skete en fejl ved opdatering af vedhæftningen.";
            }
        }
    }

    private async void CreateFile()
    {
        if(selectedFile is not null)
        {
            Directory.CreateDirectory(Path.GetDirectoryName($"{attachmentCreateDirectory}{attachment.AttachmentUrl}")); // Ensure the directory exists

            using (var stream = new FileStream($"{attachmentCreateDirectory}{attachment.AttachmentUrl}", FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(stream);
            }
        }
    }

    private async void Deactivate()
    {
        if (workingType == "card")
        {

            var entity = await _cardService.Deactivate(card.CardId);
            if (entity is null)
            {
                ShowErrorNotification($"Fejl på deaktivering af kort med id:{card.CardId}");
                errorMessage = $"Fejl på deaktivering af card med id:{card.CardId}";
                return;
            }
            int index = _cardList.FindIndex(x => x.CardId == entity.CardId);
            if (index != -1)
            {
                _cardList[index] = entity;
                createType = false;
                ResetWork();
                StateHasChanged();
                ShowSuccessNotification("Kortet blev deaktiveret.");
            }
        }
        else if (workingType == "attachment")
        {
            var entity = await _attachmentService.Deactivate(attachment.AttachmentId);
            if (entity is null)
            {
                ShowErrorNotification($"Fejl på deaktivering af vedhæftning med id:{attachment.AttachmentId}");
                errorMessage = $"Fejl på deaktivering af vedhæftning med id:{attachment.AttachmentId}";
                return;
            }
            int index = _attachmentList.FindIndex(x => x.AttachmentId == entity.AttachmentId);
            if (index != -1)
            {
                _attachmentList[index] = entity;
                createType = false;
                ResetWork();
                StateHasChanged();
                ShowSuccessNotification("Vedhæftningen blev deaktiveret.");
            }
        }
        else if (workingType == "result")
        {
            var entity = await _resultService.Deactivate(result.ResultId);
            if (entity is null)
            {
                ShowErrorNotification($"Fejl på deaktivering af resultat med id:{result.ResultId}");
                errorMessage = $"Fejl på deaktivering af resultat med id:{result.ResultId}";
                return;
            }
            int index = _resultList.FindIndex(x => x.ResultId == entity.ResultId);
            if (index != -1)
            {
                _resultList[index] = entity;
                createType = false;
                ResetWork();
                StateHasChanged();
                ShowSuccessNotification("Resultatet blev deaktiveret.");
            }
        }
        else if (workingType == "type")
        {
            var entity = await _typeService.Deactivate(type.TypeId);
            if (entity is null)
            {
                ShowErrorNotification($"Fejl på deaktivering af type med id:{type.TypeId}");
                errorMessage = $"Fejl på deaktivering af type med id:{type.TypeId}";
                return;
            }
            int index = _typeList.FindIndex(x => x.TypeId == entity.TypeId);
            if (index != -1)
            {
                _typeList[index] = entity;
                createType = false;
                ResetWork();
                StateHasChanged();
                ShowSuccessNotification("Typen blev deaktiveret.");
            }
        }
        else if (workingType == "typeCategoryList")
        {
            var entity = await _typeCategoryListService.Deactivate(typeCategoryList.TypeCategoryListId);
            if (entity is null)
            {
                ShowErrorNotification($"Fejl på deaktivering af type kategori med id:{typeCategoryList.TypeCategoryListId}");
                errorMessage = $"Fejl på deaktivering af type kategori med id:{typeCategoryList.TypeCategoryListId}";
                return;
            }
            int index = _typeCategoryListList.FindIndex(x => x.TypeCategoryListId == entity.TypeCategoryListId);
            if (index != -1)
            {
                _typeCategoryListList[index] = entity;
                createType = false;
                ResetWork();
                StateHasChanged();
                ShowSuccessNotification("Type kategorien blev deaktiveret.");
            }
        }
    }
    void ShowSuccessNotification(string detail = "NoMessage")
    {
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = $"{detail}", Duration = 4000 });
    
    }

    void ShowErrorNotification(string detail = "NoMessage")
    {
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = $"{detail}", Duration = 4000 });

    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }
    private void Delete()
    {
        errorMessage = "Slet funktionen er ikke implementeret endnu.";
    }






}
