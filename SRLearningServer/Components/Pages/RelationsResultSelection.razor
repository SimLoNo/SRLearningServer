@page "/relationselection/{typeName}"
@rendermode InteractiveServer

@using SRLearningServer.Components.Models.WebpageModels

@inject ResultListModel _allResults
@inject IConfiguration _configuration
@inject HttpClient _http

<PageTitle>Vælg de resultater der er relateret til @typeName</PageTitle>
    @foreach (var result in _allResults.Results)
{
    <RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Gap="1rem">
        @if (_allResults.SelectedResultIds.Exists(r => r == result.ResultId))
        {
            <RadzenButton Click="@(async args => ToggleResultSelected(result.ResultId))">
                <RadzenCard class="rz-background-color-success rz-border-primary">
                    <RadzenText Text="@($"{result.ResultText} (Valgt)")" />
                    @if (FileExists($"{attachmentLocation}{result.Attachment?.AttachmentUrl}"))
                    {
                        <RadzenImage Path=@($"{attachmentLocation}{result.Attachment?.AttachmentUrl}") />
                    }
                </RadzenCard>
            </RadzenButton>
        }
        else
        {
            <RadzenButton Click="@(async args => ToggleResultSelected(result.ResultId))">
                <RadzenCard class="rz-background-color-primary rz-border-primary">
                    <RadzenText Text="@result.ResultText" />
                    @if (FileExists($"{attachmentLocation}{result.Attachment?.AttachmentUrl}"))
                    {
                        <RadzenImage Path=@($"{attachmentLocation}{result.Attachment?.AttachmentUrl}") />
                    }
                </RadzenCard>
            </RadzenButton>
        }
        </RadzenRow>
}

@code {
    [Parameter] public string? typeName { get; set; }
    private string attachmentLocation = "";

    protected override async Task OnInitializedAsync()
    {
        attachmentLocation = $"{_configuration["AttachmentReadPath"]}";
        await Task.CompletedTask; // Ensure the method is awaited
    }

    private void ToggleResultSelected(int ResultId)
    {
        int entityId = (int)ResultId;
        if (_allResults.SelectedResultIds.Exists(r => r == ResultId))
        {
            _allResults.SelectedResultIds.Remove(ResultId);
        }
        else
        {
            _allResults.SelectedResultIds.Add(ResultId);
        }
    }

    private bool FileExists(string filePath)
    {
        try
        {
            var response = _http.Send(new HttpRequestMessage(HttpMethod.Head, filePath));
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }
}