@page "/relationselection/{typeName}"
@rendermode InteractiveServer

@using SRLearningServer.Components.Models.WebpageModels

@inject ResultListModel _allResults
@inject IConfiguration _configuration
@inject HttpClient _http

<PageTitle>Vælg de resultater der er relateret til @typeName</PageTitle>
    <RadzenRow>
        <RadzenTextBox @bind-Value="@searchString" Placeholder="Søg efter resultater" />
        <RadzenButton Text="Søg" Click="Search"/>
    </RadzenRow>
<RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Gap="1rem">
    @foreach (var result in _allResults.Results)
    {
        @if (searchString.Length < 5)
        {
            <RadzenColumn Size="12">
                @if (_allResults.SelectedResultIds.Exists(r => r == result.ResultId))
                {
                    <RadzenButton Click="@(args => ToggleResultSelected(result.ResultId))">
                        <RadzenCard class="rz-background-color-success rz-border-primary">
                            <RadzenText Text="@($"{result.ResultText} (Valgt)")" />
                            @if (result.Attachment is not null)
                            {
                                <RadzenImage Path=@($"{attachmentLocation}{result.Attachment?.AttachmentUrl}") />
                            }
                        </RadzenCard>
                    </RadzenButton>
                }
                else
                {
                    <RadzenButton Click="@(args => ToggleResultSelected(result.ResultId))">
                        <RadzenCard class="rz-background-color-primary rz-border-primary">
                            <RadzenText Text="@result.ResultText" />
                            @if (result.Attachment is not null)
                            {
                                <RadzenImage Path=@($"{attachmentLocation}{result.Attachment?.AttachmentUrl}") />
                            }
                        </RadzenCard>
                    </RadzenButton>
                }
            </RadzenColumn>
        }
        else if (result.ResultText.ToUpper().Contains(searchString.ToUpper()))
        {
            
            <RadzenColumn Size="12">
                @if (_allResults.SelectedResultIds.Exists(r => r == result.ResultId))
                {
                    <RadzenButton Click="@(args => ToggleResultSelected(result.ResultId))">
                        <RadzenCard class="rz-background-color-success rz-border-primary">
                            <RadzenText Text="@($"{result.ResultText} (Valgt)")" />
                            @if (result.Attachment is not null)
                            {
                                <RadzenImage Path=@($"{attachmentLocation}{result.Attachment?.AttachmentUrl}") />
                            }
                        </RadzenCard>
                    </RadzenButton>
                }
                else
                {
                    <RadzenButton Click="@(args => ToggleResultSelected(result.ResultId))">
                        <RadzenCard class="rz-background-color-primary rz-border-primary">
                            <RadzenText Text="@result.ResultText" />
                            @if (result.Attachment is not null)
                            {
                                <RadzenImage Path=@($"{attachmentLocation}{result.Attachment?.AttachmentUrl}") />
                            }
                        </RadzenCard>
                    </RadzenButton>
                }
            </RadzenColumn>
        }
    }
</RadzenRow>

@code {
    [Parameter] public string? typeName { get; set; }
    private string attachmentLocation = "";
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        attachmentLocation = $"{_configuration["AttachmentReadPath"]}";
        await Task.CompletedTask; // Ensure the method is awaited
    }

    private void ToggleResultSelected(int ResultId)
    {
        int entityId = (int)ResultId;
        if (_allResults.SelectedResultIds.Exists(r => r == ResultId))
        {
            _allResults.SelectedResultIds.Remove(ResultId);
        }
        else
        {
            _allResults.SelectedResultIds.Add(ResultId);
        }
    }

    private void Search()
    {
        StateHasChanged();
    }
}