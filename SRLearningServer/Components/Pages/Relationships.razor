@page "/relations/{listName}"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using SRLearningServer.Components.Interfaces.FrontendServices
@using SRLearningServer.Components.Interfaces.Utilities
@using SRLearningServer.Components.Models.DTO
@using SRLearningServer.Components.Models.WebpageModels
@*@attribute [AllowAnonymous]*@
@attribute [Authorize(Roles = "User")]

@inject IFrontendCardService _cardService
@inject IFrontendTypeCategoryListService _typeCategoryListService
@inject DialogService _dialogService
@inject IReportUtility _reportUtility
@inject IActivitySortingUtility _activitySortingUtility
@inject IConfiguration _configuration
@inject INotificationUtility _notificationUtility
@inject ResultListModel _allResults

<PageTitle>Relationer - @listName</PageTitle>
<RadzenText Text="@($"Huskekort - {listName}")" />

<RadzenStack class="rz-p-sm-12">
    <RadzenCard class="rz-background-color-primary rz-border-primary">
        <RadzenLabel class="rz-color-on-primary" Text="Vis altid svar" Component="AlwaysShowResult" />
        <RadzenSwitch @bind-Value=@alwaysShowResult Name="AlwaysShowResult" />
    </RadzenCard>
</RadzenStack>

<RadzenStack>
    @if (isLoading)
    {
        <RadzenStack JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                <Template>Wait</Template>
            </RadzenProgressBarCircular>
        </RadzenStack>
    }
    else if (cards.Count > 0 && isLoading == false)
    {
        <RadzenStack>
            <RadzenCard class="rz-background-color-secondary rz-border-primary">
                <RadzenStack>
                    @if (alwaysShowResult == false && showResult == true)
                    {
                        <div>
                            <p class="rz-color-on-secondary">Klik på højre side af billedet for at se næste kort. Klik på venstre side af billedet for at skjule svarene.</p>
                        </div>
                    }
                    else if (alwaysShowResult == true)
                    {
                        <div>
                            <p class="rz-color-on-secondary">Klik på højre side af billedet for at se næste kort. Klik på venstre side af billedet for at gå tilbage.</p>
                        </div>
                    }
                    else
                    {
                        <div>
                            <p class="rz-color-on-secondary">Klik på højre side af billedet for at se svarene. Klik på venstre side af billedet for at gå tilbage.</p>
                        </div>
                    }
                </RadzenStack>
                <RadzenStack class="rz-background-color-primary rz-border-primary" Style="position: relative; display: flex;" JustifyContent="JustifyContent.Center">
                    <RadzenImage Path="@($"{attachmentLocation}{cards[currentCard].Attachment?.AttachmentUrl}")" Style="max-height: 60vh; max-width:100%; object-fit: contain;" />
                    <RadzenButton Text="Go back" Click="@(args => Progress(false))" Style="position: absolute; left: 0; width: 50%; height: 100%; opacity: 0;" />
                    <RadzenButton Text="Progress" Click="@(args => Progress(true))" Style="position: absolute; right: 0; width: 50%; height: 100%; opacity: 0;" />
                </RadzenStack>

                <RadzenStack>
                    <p class="rz-color-on-secondary">@cards[currentCard].CardText</p>
                </RadzenStack>
                <RadzenStack>
                    @if (showResult == true || alwaysShowResult == true)
                    {
                        <div>
                            <ul>
                                @foreach (var result in cards[currentCard].Results)
                                {
                                    <li class="rz-color-on-secondary">@result.ResultText</li>
                                }
                            </ul>

                            <h5 class="rz-color-on-secondary">@cards[currentCard].CardName</h5>
                        </div>
                    }
                </RadzenStack>
            </RadzenCard>
        </RadzenStack>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error">
            @errorMessage
        </p>
    }@*
    else
    {
    <RadzenText Text="Ingen signaler at vise."></RadzenText>
    } *@


</RadzenStack>




<RadzenButton Icon="update" Text="@($"{(cards.Count == 0 ? "Vis" : "Opdater")} {listName}")" Click="GetSignals"></RadzenButton>
<RadzenButton Icon="swap_horiz" Text="@($"Til/fravælg {listName}")" Click="ToggleSignalList"></RadzenButton>

<RadzenStack>
    @if (showTypeList)
    {
        @foreach (var signal in TypeSelection)
        {
            <RadzenCard class="rz-background-color-secondary">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenLabel Text="@($"Vælg hvilke {signal.SignalType.CardTypeName} du vil se. Klik derefter på {(cards.Count == 0 ? "Vis" : "Opdater")} {listName}")" Component="EntitySelectionDropDown" />
                    <RadzenDropDown Multiple=true @bind-Value=@signal.SelectedSignalAspects TextProperty="@nameof(TypeDto.CardTypeName)" Style="width:auto" Name="EntitySelectionDropDown" Data=@signal.AllowedSignalAspects TValue="IEnumerable<TypeDto>" AllowClear=true AllowFiltering=false AllowSorting=false SelectAllText="@($"Vælg alle {listName}")" SelectedItemsText="@($"{listName} er valgt")" Placeholder="@($"Ingen {signal.SignalType.CardTypeName}er valgt")" Chips=true MaxSelectedLabels="10">

                    </RadzenDropDown>
                </RadzenStack>
            </RadzenCard>

        }

    }
</RadzenStack>


@code {
    [Parameter] public string? listName { get; set; }
    private int currentCard = 0;
    private List<CardDto> cards = new();
    private TypeCategoryListDto typeCategoryList = new();
    private List<SignalModel> TypeSelection = new();
    //private List<ResultDto> allResults = new();
    private string errorMessage = "";
    private bool isLoading = false;
    private bool showTypeList = false;
    private bool showResult = false;
    private bool alwaysShowResult = false;

    string attachmentLocation = "";

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            attachmentLocation = $"{_configuration["AttachmentReadPath"]}";
            typeCategoryList = await _typeCategoryListService.GetByName(listName);
            typeCategoryList = _activitySortingUtility.SortActiveByStatus(typeCategoryList);
            if (typeCategoryList is not null)
            {
                foreach (TypeDto relationType in typeCategoryList.Types)
                {
                    TypeCategoryListDto subRelationType = await _typeCategoryListService.GetByName($"{relationType.CardTypeName}Liste");
                    subRelationType = _activitySortingUtility.SortActiveByStatus(subRelationType);
                    if (subRelationType is not null)
                    {
                        SignalModel signal = new SignalModel()
                        {
                            SignalType = relationType,
                            AllowedSignalAspects = new List<TypeDto>(subRelationType.Types),
                            SelectedSignalAspects = new List<TypeDto>(subRelationType.Types)
                        };
                        TypeSelection.Add(signal);
                    }
                    else
                    {
                        errorMessage = $"Ingen {listName} blev fundet på entitet {relationType.CardTypeName}";
                        _notificationUtility.SendNotification(errorMessage);
                    }
                }
            }
            else
            {
                errorMessage = $"Ingen {listName} blev fundet.";
                _notificationUtility.SendNotification(errorMessage);

            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error on getting {listName}: {ex.Message}";
            _notificationUtility.SendErrorNotification(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Toggles between showing and hiding the list of sortable Types in the UI.
    /// </summary>
    private void ToggleSignalList()
    {
        showTypeList = !showTypeList;
    }
    /// <summary>
    /// Gets the cards from the server based on the selected types.
    /// </summary>
    private async void GetSignals()
    {
        isLoading = true;
        errorMessage = "";
        showResult = false;
        showTypeList = false;
        currentCard = 0;
        List<List<TypeDto>> signalAspects = new();
        foreach (SignalModel typeModel in TypeSelection)
        {
            if (typeModel.SelectedSignalAspects is not null)
            {
                foreach (TypeDto aspect in typeModel.SelectedSignalAspects)
                {

                    List<TypeDto> Selection = new();
                    Selection.Add(typeModel.SignalType);
                    Selection.Add(aspect);
                    signalAspects.Add(Selection);

                }
            }
        }
        cards = await _cardService.GetByType(signalAspects);
        cards = _activitySortingUtility.SortActiveByStatus(cards).ToList();
        if (cards is null)
        {
            cards = new();
            errorMessage = "Ingen signaler med de sendte kriterier blev fundet.";
            _notificationUtility.SendNotification(errorMessage);
        }
        foreach (CardDto card in cards)
        {
            _allResults.Results.AddRange(card.Results);
        }
        _allResults.Results = _allResults.Results.Distinct().ToList();
        isLoading = false;
        StateHasChanged();

    }
    /// <summary>
    /// Toggles between always showing the result of a card and only showing the result on the second stage of progess.
    /// </summary>
    private void ToggleAlwaysShowResult()
    {
        alwaysShowResult = !alwaysShowResult;
    }
    /// <summary>
    /// Progess the card based on the direction given in the parameter. True is forward, false is backwards. When going forward, if the card has its result shown, it will advance to the next card, otherwise it will show the result. When going backwards, if the result is shown, and alwaysShowResult is false it will hide the result, otherwise it will go to the previous card.
    /// </summary>
    /// <param name="direction"></param>
    private void Progress(bool direction)
    {
        if (direction == true)
        {
            if (showResult == true || alwaysShowResult == true)
            {
                showResult = false;
                if (currentCard < cards.Count - 1)
                {
                    currentCard++;

                }
                else
                {
                    currentCard = 0;
                }
            }
            else
            {
                showResult = true;
            }
        }
        else
        {
            if (showResult == false || alwaysShowResult == true)
            {
                if (currentCard > 0)
                {
                    currentCard--;
                }
                else
                {
                    currentCard = cards.Count - 1;
                }
                showResult = true;
            }
            else
            {
                showResult = false;
            }
        }
    }
}
