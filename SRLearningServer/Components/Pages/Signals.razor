@page "/memorycards/{listName}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using SRLearningServer.Components.Interfaces.FrontendServices
@using SRLearningServer.Components.Interfaces.Services
@using SRLearningServer.Components.Interfaces.Utilities
@using SRLearningServer.Components.Models.DTO
@using SRLearningServer.Components.Models.WebpageModels
@*@attribute [AllowAnonymous]*@
@attribute [Authorize(Roles = "User")]

@inject IFrontendCardService _cardService
@inject IFrontendTypeCategoryListService _typeCategoryListService
@inject DialogService _dialogService
@inject IReportUtility _reportUtility
@inject IActivitySortingUtility _activitySortingUtility
@inject IConfiguration _configuration

<PageTitle>Huskekort - @listName</PageTitle>

    <h1>Huskekort - @listName</h1>


<RadzenStack class="rz-p-sm-12">
    <RadzenCard class="rz-background-color-primary rz-border-primary">
        <RadzenLabel class="rz-color-on-primary" Text="Vis altid svar" Component="AlwaysShowResult" />
    <RadzenSwitch @bind-Value=@alwaysShowResult Name="AlwaysShowResult" />
    </RadzenCard>
</RadzenStack>

<RadzenStack>
    @if (isLoading)
    {
        <RadzenStack JustifyContent
        ="JustifyContent.Center" AlignItems
        ="AlignItems.Center">
            <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                <Template>Wait</Template>
            </RadzenProgressBarCircular>
        </RadzenStack>
    }
    else if (cards.Count > 0 && isLoading == false)
    {
        <RadzenStack>
            <RadzenCard class="rz-background-color-secondary rz-border-primary">
                <RadzenStack>
                    @if (alwaysShowResult == false && showResult == true)
                    {
                        <div>
                            <p class="rz-color-on-secondary">Klik på højre side af billedet for at se næste kort. Klik på venstre side af billedet for at skjule svarene.</p>
                        </div>
                    }
                    else if (alwaysShowResult == true)
                    {
                        <div>
                            <p class="rz-color-on-secondary">Klik på højre side af billedet for at se næste kort. Klik på venstre side af billedet for at gå tilbage.</p>
                        </div>
                    }
                    else
                    {
                        <div>
                            <p class="rz-color-on-secondary">Klik på højre side af billedet for at se svarene. Klik på venstre side af billedet for at gå tilbage.</p>
                        </div>
                    }
                </RadzenStack>
                <RadzenStack class="rz-background-color-primary rz-border-primary" Style="position: relative; display: flex;" JustifyContent="JustifyContent.Center">
                    <RadzenImage Path="@($"{attachmentLocation}{cards[currentCard].Attachment?.AttachmentUrl}")" Style="max-height: 60vh; max-width:100%; object-fit: contain;" />
                    <RadzenButton Text="Go back" Click="@(args => Progress(false))" Style="position: absolute; left: 0; width: 50%; height: 100%; opacity: 0;" />
                    <RadzenButton Text="Progress" Click="@(args => Progress(true))" Style="position: absolute; right: 0; width: 50%; height: 100%; opacity: 0;" />
                </RadzenStack>
                
                <RadzenStack>
                    <p class="rz-color-on-secondary">@cards[currentCard].CardText</p>
                </RadzenStack>
                <RadzenStack>
                    @if (showResult == true || alwaysShowResult == true)
                    {
                        <div>
                            <ul>
                                @foreach (var result in cards[currentCard].Results)
                                {
                                    <li class="rz-color-on-secondary">@result.ResultText</li>
                                }
                            </ul>

                            <h5 class="rz-color-on-secondary">@cards[currentCard].CardName</h5>
                        </div>
                    }
                </RadzenStack>
            </RadzenCard>
        </RadzenStack>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error">@errorMessage
        </p>
    }@* 
    else
    {
        <RadzenText Text="Ingen signaler at vise."></RadzenText>
    } *@


</RadzenStack>




<RadzenButton Icon="update" Text="@($"{(cards.Count == 0 ? "Vis" : "Opdater")} {listName}")" Click="GetSignals"></RadzenButton>
<RadzenButton Icon="swap_horiz" Text="@($"Til/fravælg {listName}")" Click="ToggleSignalList"></RadzenButton>
<RadzenButton Icon="bug_report" Text="Raporter fejl" Click="SendReport"></RadzenButton>

<RadzenStack>
    @if (showSignalList)
    {
        @foreach (var signal in signalSelection)
        {
            <RadzenCard class="rz-background-color-secondary">
                <RadzenStack Orientation="Orientation.Vertical" >
                    <RadzenLabel Text="@($"Vælg hvilke {signal.SignalType.CardTypeName} du vil se. Klik derefter på {(cards.Count == 0 ? "Vis" : "Opdater")} {listName}")" Component="EntitySelectionDropDown" />
                    <RadzenDropDown Multiple=true @bind-Value=@signal.SelectedSignalAspects TextProperty="@nameof(TypeDto.CardTypeName)" Style="width:auto" Name="EntitySelectionDropDown" Data=@signal.AllowedSignalAspects TValue="IEnumerable<TypeDto>" AllowClear=true AllowFiltering=false AllowSorting=false SelectAllText="@($"Vælg alle {listName}")" SelectedItemsText="@($"{listName} er valgt")" Placeholder="@($"Ingen {signal.SignalType.CardTypeName}er valgt")" Chips=true MaxSelectedLabels="10">

                    </RadzenDropDown>
                </RadzenStack>
            </RadzenCard>

        }

    }
</RadzenStack>


@code {
    [Parameter]

    public string? listName { get; set;}
    private int currentCard = 0;
    private List<CardDto> cards = new();
    private TypeCategoryListDto signals = new();
    private List<SignalModel> signalSelection = new();
    private string errorMessage = "";
    private bool isLoading = false;
    private bool showSignalList = false;
    private int? expandedSignalId = null;
    private bool showResult = false;
    private bool alwaysShowResult = false;

    string attachmentLocation = "";


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            attachmentLocation = $"{_configuration["AttachmentReadPath"]}";
            signals = await _typeCategoryListService.GetByName(listName);
            signals = _activitySortingUtility.SortActiveByStatus(signals);
            if (signals is not null)
            {
                foreach (TypeDto signalType in signals.Types)
                {
                    TypeCategoryListDto aspects = await _typeCategoryListService.GetByName($"{signalType.CardTypeName}Liste");
                    aspects = _activitySortingUtility.SortActiveByStatus(aspects);
                    if (aspects is not null)
                    {
                        SignalModel signal = new SignalModel()
                            {
                                SignalType = signalType,
                                AllowedSignalAspects = new List<TypeDto>(aspects.Types),
                                SelectedSignalAspects = new List<TypeDto>(aspects.Types)
                            };

                        signalSelection.Add(signal);
                    }
                    else
                    {
                        errorMessage = $"Ingen {listName} blev fundet på entitet {signalType.CardTypeName}";
                    }
                }
            }
            else
            {
                errorMessage = $"Ingen {listName} blev fundet.";
            
            }
        }
        catch (Exception ex)
        {

            errorMessage = $"Error on getting {listName}: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleSignalList()
    {
        showSignalList = !showSignalList;
    }

    private void ToggleAspectList(int signalId)
    {
        if (expandedSignalId == signalId)
        {
            expandedSignalId = null;
        }
        else
        {
            expandedSignalId = signalId;
        }
    }



    private async void GetSignals()
    {
        isLoading = true;
        errorMessage = "";
        showResult = false;
        showSignalList = false;
        expandedSignalId = null;
        currentCard = 0;
        List<List<TypeDto>> signalAspects = new();
        foreach (SignalModel signal in signalSelection)
        {
            if (signal.SelectedSignalAspects is not null)
            {
                foreach (TypeDto aspect in signal.SelectedSignalAspects)
                {

                    List<TypeDto> Selection = new();
                    Selection.Add(signal.SignalType);
                    Selection.Add(aspect);
                    signalAspects.Add(Selection);

                }
            }
        }
        cards = await _cardService.GetByType(signalAspects);
        cards = _activitySortingUtility.SortActiveByStatus(cards).ToList();
        if (cards is null)
        {
            cards = new();
            errorMessage = "Ingen signaler med de sendte kriterier blev fundet.";
        }
        isLoading = false;
        StateHasChanged();

    }

    private void ToggleAlwaysShowResult()
    {
        alwaysShowResult = !alwaysShowResult;
    }

    private void Progress(bool direction)
    {
        if (direction == true)
        {
            if(showResult == true || alwaysShowResult == true)
            {
                showResult = false;
                if (currentCard < cards.Count - 1)
                {
                    currentCard++;

                }
                else
                {
                    currentCard = 0;
                }
            }
            else
            {
                showResult = true;
            }
        }
        else
        {
            if (showResult == false || alwaysShowResult == true)
            {
                if (currentCard > 0)
                {
                    currentCard--;
                }
                else
                {
                    currentCard = cards.Count - 1;
                }
                showResult = true;
            }
            else
            {
                showResult = false;
            }
        }
    }

    private async void SendReport()
    {
        var result = await _dialogService.OpenAsync<DialogReportPage>("Rapport");
        string reportString = $"Rapport angivet for {listName}. <br>";
        if (result is not null)
        {
            try
            {
                reportString += $"Bruger besked: {result} <br>";
                reportString += $"Brugerens valgte {listName}: <br>";
                foreach (var item in signalSelection)
                {
                    reportString += "<div>";
                    reportString += $"{listName}: {item.SignalType.CardTypeName} <br>";
                    reportString += _reportUtility.Format(item.SelectedSignalAspects, "<br>");
                    reportString += "</div>";

                }
                if (cards is not null && cards.Count() > currentCard)
                {
                    reportString += "<div>";
                    reportString += $"Det viste kort er: <br>";
                    reportString += _reportUtility.Format(cards[currentCard], "<br>");
                    reportString += $"Fejlbesked: {errorMessage} <br>";
                    reportString += "</div>";    
                }
                else
                {
                    reportString += "<div>";
                    reportString += $"Der er ingen kort at vise. <br>";
                    reportString += $"cards længde: {cards.Count} <br>";
                    reportString += $"currentCard værdi: {currentCard} <br>";
                    reportString += $"Fejlbesked: {errorMessage} <br>";
                    reportString += "</div>";
                }

                reportString += "<div>";
                reportString += $"SIDE DATA: <br>";
                reportString += $"Følgende {listName} er hentet fra serveren: <br>";
                foreach (var item in signalSelection)
                {
                    reportString += "<div>";
                    reportString += $"{listName} kategori: {_reportUtility.Format(item.SignalType, "<br>")}";
                    reportString += $"{listName} typer: {_reportUtility.Format(item.AllowedSignalAspects, "<br>")}";
                    reportString += "</div>";
                }
                reportString += "</div>";
                await _reportUtility.GenerateReport(reportString);

            }
            catch (Exception ex)
            {
                
                throw;
            }
        }
    }

}





